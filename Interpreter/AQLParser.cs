//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/thoma/Documents/GitHub/AQL/Interpreter/AQL.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, TYPEKEYWORD=55, IDENTIFIER=56, BOOL=57, INT=58, DOUBLE=59, 
		STRING=60, WS=61;
	public const int
		RULE_program = 0, RULE_importStatement = 1, RULE_definition = 2, RULE_constDefinition = 3, 
		RULE_functionDefinition = 4, RULE_formalParameterList = 5, RULE_networks = 6, 
		RULE_queueDefinition = 7, RULE_networkDefinition = 8, RULE_simulateDefinition = 9, 
		RULE_instanceList = 10, RULE_instance = 11, RULE_routes = 12, RULE_metrics = 13, 
		RULE_metricList = 14, RULE_metric = 15, RULE_assign = 16, RULE_statement = 17, 
		RULE_whileStatement = 18, RULE_ifStatement = 19, RULE_elseIfStatement = 20, 
		RULE_elseStatement = 21, RULE_elseIf = 22, RULE_block = 23, RULE_returnStatement = 24, 
		RULE_expression = 25, RULE_value = 26, RULE_functionCall = 27, RULE_type = 28, 
		RULE_arrayInitialization = 29, RULE_arrayIndexing = 30, RULE_arrayType = 31, 
		RULE_routeType = 32, RULE_qualifiedIdList = 33, RULE_qualifiedId = 34, 
		RULE_idList = 35, RULE_identifier = 36, RULE_bool = 37, RULE_int = 38, 
		RULE_double = 39, RULE_string = 40;
	public static readonly string[] ruleNames = {
		"program", "importStatement", "definition", "constDefinition", "functionDefinition", 
		"formalParameterList", "networks", "queueDefinition", "networkDefinition", 
		"simulateDefinition", "instanceList", "instance", "routes", "metrics", 
		"metricList", "metric", "assign", "statement", "whileStatement", "ifStatement", 
		"elseIfStatement", "elseStatement", "elseIf", "block", "returnStatement", 
		"expression", "value", "functionCall", "type", "arrayInitialization", 
		"arrayIndexing", "arrayType", "routeType", "qualifiedIdList", "qualifiedId", 
		"idList", "identifier", "bool", "int", "double", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'const'", "'function'", "'('", "')'", "'{'", "'}'", 
		"','", "'queue'", "'number_of_servers:'", "'service:'", "', capacity:'", 
		"'network'", "'inputs:'", "';'", "'outputs:'", "'instances:'", "'routes:'", 
		"'simulate'", "'run:'", "'until:'", "'times:'", "':'", "'->'", "'metrics:'", 
		"'['", "']'", "'mrt'", "'vrt'", "'util'", "'throughput'", "'num'", "'avgNum'", 
		"'='", "'while'", "'do'", "'if'", "'else if'", "'else'", "'return'", "'!'", 
		"'-'", "'*'", "'/'", "'+'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", 
		"'&&'", "'||'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "TYPEKEYWORD", "IDENTIFIER", 
		"BOOL", "INT", "DOUBLE", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			int _alt;
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				importStatement();
				}
				break;
			case T__1:
			case T__2:
			case T__8:
			case T__12:
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 83;
						definition();
						}
						} 
					}
					State = 88;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(T__0);
			State = 92;
			@string();
			State = 93;
			program();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstDefinitionContext constDefinition() {
			return GetRuleContext<ConstDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NetworksContext networks() {
			return GetRuleContext<NetworksContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimulateDefinitionContext simulateDefinition() {
			return GetRuleContext<SimulateDefinitionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_definition);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				constDefinition();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				functionDefinition();
				}
				break;
			case T__8:
			case T__12:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97;
				networks();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 4);
				{
				State = 98;
				simulateDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public ConstDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDefinitionContext constDefinition() {
		ConstDefinitionContext _localctx = new ConstDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_constDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__1);
			State = 102;
			type();
			State = 103;
			assign();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public TypeContext returnType;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(T__2);
			State = 106;
			_localctx.returnType = type();
			State = 107;
			identifier();
			State = 108;
			Match(T__3);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 108086391124000768L) != 0)) {
				{
				State = 109;
				formalParameterList();
				}
			}

			State = 112;
			Match(T__4);
			State = 113;
			Match(T__5);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 108087662434320384L) != 0)) {
				{
				State = 114;
				statement(0);
				}
			}

			State = 117;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 10, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			type();
			State = 120;
			identifier();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 121;
				Match(T__7);
				State = 122;
				type();
				State = 123;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NetworksContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueueDefinitionContext queueDefinition() {
			return GetRuleContext<QueueDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NetworkDefinitionContext networkDefinition() {
			return GetRuleContext<NetworkDefinitionContext>(0);
		}
		public NetworksContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_networks; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetworks(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NetworksContext networks() {
		NetworksContext _localctx = new NetworksContext(Context, State);
		EnterRule(_localctx, 12, RULE_networks);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				queueDefinition();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				networkDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueueDefinitionContext : ParserRuleContext {
		public ExpressionContext numberOfServers;
		public ExpressionContext service;
		public ExpressionContext capacity;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetricsContext metrics() {
			return GetRuleContext<MetricsContext>(0);
		}
		public QueueDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queueDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueueDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueueDefinitionContext queueDefinition() {
		QueueDefinitionContext _localctx = new QueueDefinitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_queueDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(T__8);
			State = 132;
			identifier();
			State = 133;
			Match(T__5);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 134;
				Match(T__9);
				State = 135;
				_localctx.numberOfServers = expression(0);
				State = 136;
				Match(T__7);
				}
			}

			State = 140;
			Match(T__10);
			State = 141;
			_localctx.service = expression(0);
			State = 142;
			Match(T__11);
			State = 143;
			_localctx.capacity = expression(0);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 144;
				Match(T__7);
				State = 145;
				metrics();
				}
			}

			State = 148;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NetworkDefinitionContext : ParserRuleContext {
		public IdListContext inputs;
		public IdListContext outputs;
		public InstanceListContext instances;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutesContext routes() {
			return GetRuleContext<RoutesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext[] idList() {
			return GetRuleContexts<IdListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext idList(int i) {
			return GetRuleContext<IdListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetricsContext metrics() {
			return GetRuleContext<MetricsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstanceListContext instanceList() {
			return GetRuleContext<InstanceListContext>(0);
		}
		public NetworkDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_networkDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetworkDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NetworkDefinitionContext networkDefinition() {
		NetworkDefinitionContext _localctx = new NetworkDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_networkDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(T__12);
			State = 151;
			identifier();
			State = 152;
			Match(T__5);
			State = 153;
			Match(T__13);
			State = 154;
			_localctx.inputs = idList();
			State = 155;
			Match(T__14);
			State = 156;
			Match(T__15);
			State = 157;
			_localctx.outputs = idList();
			State = 165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 158;
				Match(T__14);
				State = 159;
				Match(T__16);
				State = 160;
				Match(T__5);
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 161;
					_localctx.instances = instanceList();
					}
				}

				State = 164;
				Match(T__6);
				}
				break;
			}
			State = 167;
			Match(T__14);
			State = 168;
			Match(T__17);
			State = 169;
			Match(T__5);
			State = 170;
			routes();
			State = 171;
			Match(T__6);
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 172;
				Match(T__14);
				State = 173;
				metrics();
				}
				break;
			}
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 176;
				Match(T__14);
				}
			}

			State = 179;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimulateDefinitionContext : ParserRuleContext {
		public QualifiedIdContext network;
		public ExpressionContext terminationCriteria;
		public ExpressionContext runs;
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdContext qualifiedId() {
			return GetRuleContext<QualifiedIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SimulateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simulateDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimulateDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimulateDefinitionContext simulateDefinition() {
		SimulateDefinitionContext _localctx = new SimulateDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_simulateDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(T__18);
			State = 182;
			Match(T__5);
			State = 183;
			Match(T__19);
			State = 184;
			_localctx.network = qualifiedId();
			State = 185;
			Match(T__7);
			State = 186;
			Match(T__20);
			State = 187;
			_localctx.terminationCriteria = expression(0);
			State = 188;
			Match(T__7);
			State = 189;
			Match(T__21);
			State = 190;
			_localctx.runs = expression(0);
			State = 191;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstanceContext[] instance() {
			return GetRuleContexts<InstanceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstanceContext instance(int i) {
			return GetRuleContext<InstanceContext>(i);
		}
		public InstanceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceListContext instanceList() {
		InstanceListContext _localctx = new InstanceListContext(Context, State);
		EnterRule(_localctx, 20, RULE_instanceList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			instance();
			State = 198;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 194;
					Match(T__14);
					State = 195;
					instance();
					}
					} 
				}
				State = 200;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 201;
				Match(T__14);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdContext qualifiedId() {
			return GetRuleContext<QualifiedIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public InstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceContext instance() {
		InstanceContext _localctx = new InstanceContext(Context, State);
		EnterRule(_localctx, 22, RULE_instance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			qualifiedId();
			State = 205;
			Match(T__22);
			State = 206;
			idList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public RoutesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutesContext routes() {
		RoutesContext _localctx = new RoutesContext(Context, State);
		EnterRule(_localctx, 24, RULE_routes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			identifier();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 209;
				Match(T__23);
				State = 210;
				identifier();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__23 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetricsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetricListContext metricList() {
			return GetRuleContext<MetricListContext>(0);
		}
		public MetricsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metrics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetrics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetricsContext metrics() {
		MetricsContext _localctx = new MetricsContext(Context, State);
		EnterRule(_localctx, 26, RULE_metrics);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(T__24);
			State = 216;
			Match(T__25);
			State = 217;
			metricList();
			State = 218;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetricListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetricContext[] metric() {
			return GetRuleContexts<MetricContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetricContext metric(int i) {
			return GetRuleContext<MetricContext>(i);
		}
		public MetricListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metricList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetricList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetricListContext metricList() {
		MetricListContext _localctx = new MetricListContext(Context, State);
		EnterRule(_localctx, 28, RULE_metricList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			metric();
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 221;
				Match(T__7);
				State = 222;
				metric();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetricContext : ParserRuleContext {
		public MetricContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetricContext metric() {
		MetricContext _localctx = new MetricContext(Context, State);
		EnterRule(_localctx, 30, RULE_metric);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16911433728L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 32, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			identifier();
			State = 231;
			Match(T__33);
			State = 232;
			expression(0);
			State = 233;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		return statement(0);
	}

	private StatementContext statement(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatementContext _localctx = new StatementContext(Context, _parentState);
		StatementContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_statement, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 236;
				whileStatement();
				}
				break;
			case 2:
				{
				State = 237;
				assign();
				}
				break;
			case 3:
				{
				State = 238;
				type();
				State = 239;
				assign();
				}
				break;
			case 4:
				{
				State = 241;
				ifStatement();
				}
				break;
			case 5:
				{
				State = 242;
				returnStatement();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 250;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statement);
					State = 245;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 246;
					Match(T__14);
					State = 247;
					statement(2);
					}
					} 
				}
				State = 252;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(T__34);
			State = 254;
			expression(0);
			State = 255;
			Match(T__35);
			State = 256;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(T__36);
			State = 259;
			expression(0);
			State = 260;
			block();
			State = 264;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 261;
					elseIfStatement();
					}
					} 
				}
				State = 266;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 267;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(T__37);
			State = 271;
			expression(0);
			State = 272;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(T__38);
			State = 275;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfContext elseIf() {
			return GetRuleContext<ElseIfContext>(0);
		}
		public ElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfContext elseIf() {
		ElseIfContext _localctx = new ElseIfContext(Context, State);
		EnterRule(_localctx, 44, RULE_elseIf);
		try {
			State = 285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 277;
				Match(T__37);
				State = 278;
				expression(0);
				State = 279;
				Match(T__5);
				State = 280;
				statement(0);
				State = 281;
				Match(T__6);
				State = 282;
				elseIf();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 46, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(T__5);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 108087662434320384L) != 0)) {
				{
				State = 288;
				statement(0);
				}
			}

			State = 291;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(T__39);
			State = 294;
			expression(0);
			State = 295;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case IDENTIFIER:
			case BOOL:
			case INT:
			case DOUBLE:
			case STRING:
				{
				State = 298;
				value();
				}
				break;
			case T__40:
			case T__41:
				{
				State = 299;
				_la = TokenStream.LA(1);
				if ( !(_la==T__40 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 300;
				expression(7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 323;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 321;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 303;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 304;
						_la = TokenStream.LA(1);
						if ( !(_la==T__42 || _la==T__43) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 305;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 306;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 307;
						_la = TokenStream.LA(1);
						if ( !(_la==T__41 || _la==T__44) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 308;
						expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 309;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 310;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055531162664960L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 311;
						expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 312;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 313;
						_la = TokenStream.LA(1);
						if ( !(_la==T__49 || _la==T__50) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 314;
						expression(4);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 315;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 316;
						Match(T__51);
						State = 317;
						expression(3);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 318;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 319;
						Match(T__52);
						State = 320;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 325;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdContext qualifiedId() {
			return GetRuleContext<QualifiedIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoubleContext @double() {
			return GetRuleContext<DoubleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializationContext arrayInitialization() {
			return GetRuleContext<ArrayInitializationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexingContext arrayIndexing() {
			return GetRuleContext<ArrayIndexingContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 52, RULE_value);
		try {
			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 326;
				functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 327;
				qualifiedId();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 328;
				@string();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 329;
				@double();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 330;
				@int();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 331;
				@bool();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 332;
				arrayInitialization();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 333;
				arrayIndexing();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public QualifiedIdContext functionIdentifier;
		public QualifiedIdListContext parameters;
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdContext qualifiedId() {
			return GetRuleContext<QualifiedIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdListContext qualifiedIdList() {
			return GetRuleContext<QualifiedIdListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			_localctx.functionIdentifier = qualifiedId();
			State = 337;
			Match(T__3);
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 338;
				_localctx.parameters = qualifiedIdList();
				}
			}

			State = 341;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEKEYWORD() { return GetToken(AQLParser.TYPEKEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteTypeContext routeType() {
			return GetRuleContext<RouteTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_type);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPEKEYWORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343;
				Match(TYPEKEYWORD);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 344;
				arrayType();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 345;
				routeType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayInitializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitialization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitialization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializationContext arrayInitialization() {
		ArrayInitializationContext _localctx = new ArrayInitializationContext(Context, State);
		EnterRule(_localctx, 58, RULE_arrayInitialization);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			Match(T__5);
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2233785415175766080L) != 0)) {
				{
				{
				State = 349;
				value();
				}
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 355;
				Match(T__7);
				State = 356;
				value();
				}
				}
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 362;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexingContext : ParserRuleContext {
		public QualifiedIdContext target;
		public ExpressionContext index;
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdContext qualifiedId() {
			return GetRuleContext<QualifiedIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayIndexingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexingContext arrayIndexing() {
		ArrayIndexingContext _localctx = new ArrayIndexingContext(Context, State);
		EnterRule(_localctx, 60, RULE_arrayIndexing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			_localctx.target = qualifiedId();
			State = 365;
			Match(T__25);
			State = 366;
			_localctx.index = expression(0);
			State = 367;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			Match(T__25);
			State = 370;
			type();
			State = 371;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdContext[] qualifiedId() {
			return GetRuleContexts<QualifiedIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdContext qualifiedId(int i) {
			return GetRuleContext<QualifiedIdContext>(i);
		}
		public RouteTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routeType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRouteType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteTypeContext routeType() {
		RouteTypeContext _localctx = new RouteTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_routeType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			qualifiedId();
			State = 374;
			Match(T__23);
			State = 375;
			qualifiedId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdContext[] qualifiedId() {
			return GetRuleContexts<QualifiedIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdContext qualifiedId(int i) {
			return GetRuleContext<QualifiedIdContext>(i);
		}
		public QualifiedIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdListContext qualifiedIdList() {
		QualifiedIdListContext _localctx = new QualifiedIdListContext(Context, State);
		EnterRule(_localctx, 66, RULE_qualifiedIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			qualifiedId();
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 378;
				Match(T__7);
				State = 379;
				qualifiedId();
				}
				}
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public QualifiedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdContext qualifiedId() {
		QualifiedIdContext _localctx = new QualifiedIdContext(Context, State);
		EnterRule(_localctx, 68, RULE_qualifiedId);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			identifier();
			State = 390;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 386;
					Match(T__53);
					State = 387;
					identifier();
					}
					} 
				}
				State = 392;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 70, RULE_idList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			identifier();
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 394;
				Match(T__7);
				State = 395;
				identifier();
				}
				}
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AQLParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(AQLParser.BOOL, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 74, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AQLParser.INT, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 76, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(AQLParser.DOUBLE, 0); }
		public DoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleContext @double() {
		DoubleContext _localctx = new DoubleContext(Context, State);
		EnterRule(_localctx, 78, RULE_double);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			Match(DOUBLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AQLParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 80, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return statement_sempred((StatementContext)_localctx, predIndex);
		case 25: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool statement_sempred(StatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,61,412,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,1,0,5,0,85,8,0,10,
		0,12,0,88,9,0,3,0,90,8,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,100,8,2,1,
		3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,111,8,4,1,4,1,4,1,4,3,4,116,8,4,
		1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,126,8,5,1,6,1,6,3,6,130,8,6,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,3,7,139,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,147,8,7,
		1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,163,8,8,1,
		8,3,8,166,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,175,8,8,1,8,3,8,178,8,8,
		1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
		5,10,197,8,10,10,10,12,10,200,9,10,1,10,3,10,203,8,10,1,11,1,11,1,11,1,
		11,1,12,1,12,1,12,4,12,212,8,12,11,12,12,12,213,1,13,1,13,1,13,1,13,1,
		13,1,14,1,14,1,14,5,14,224,8,14,10,14,12,14,227,9,14,1,15,1,15,1,16,1,
		16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,244,8,17,
		1,17,1,17,1,17,5,17,249,8,17,10,17,12,17,252,9,17,1,18,1,18,1,18,1,18,
		1,18,1,19,1,19,1,19,1,19,5,19,263,8,19,10,19,12,19,266,9,19,1,19,3,19,
		269,8,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,3,22,286,8,22,1,23,1,23,3,23,290,8,23,1,23,1,23,1,24,1,24,
		1,24,1,24,1,25,1,25,1,25,1,25,3,25,302,8,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,322,
		8,25,10,25,12,25,325,9,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,
		335,8,26,1,27,1,27,1,27,3,27,340,8,27,1,27,1,27,1,28,1,28,1,28,3,28,347,
		8,28,1,29,1,29,5,29,351,8,29,10,29,12,29,354,9,29,1,29,1,29,5,29,358,8,
		29,10,29,12,29,361,9,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,
		31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,5,33,381,8,33,10,33,12,33,384,
		9,33,1,34,1,34,1,34,5,34,389,8,34,10,34,12,34,392,9,34,1,35,1,35,1,35,
		5,35,397,8,35,10,35,12,35,400,9,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,
		1,39,1,40,1,40,1,40,0,2,34,50,41,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
		76,78,80,0,6,1,0,28,33,1,0,41,42,1,0,43,44,2,0,42,42,45,45,1,0,46,49,1,
		0,50,51,420,0,89,1,0,0,0,2,91,1,0,0,0,4,99,1,0,0,0,6,101,1,0,0,0,8,105,
		1,0,0,0,10,119,1,0,0,0,12,129,1,0,0,0,14,131,1,0,0,0,16,150,1,0,0,0,18,
		181,1,0,0,0,20,193,1,0,0,0,22,204,1,0,0,0,24,208,1,0,0,0,26,215,1,0,0,
		0,28,220,1,0,0,0,30,228,1,0,0,0,32,230,1,0,0,0,34,243,1,0,0,0,36,253,1,
		0,0,0,38,258,1,0,0,0,40,270,1,0,0,0,42,274,1,0,0,0,44,285,1,0,0,0,46,287,
		1,0,0,0,48,293,1,0,0,0,50,301,1,0,0,0,52,334,1,0,0,0,54,336,1,0,0,0,56,
		346,1,0,0,0,58,348,1,0,0,0,60,364,1,0,0,0,62,369,1,0,0,0,64,373,1,0,0,
		0,66,377,1,0,0,0,68,385,1,0,0,0,70,393,1,0,0,0,72,401,1,0,0,0,74,403,1,
		0,0,0,76,405,1,0,0,0,78,407,1,0,0,0,80,409,1,0,0,0,82,90,3,2,1,0,83,85,
		3,4,2,0,84,83,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,90,
		1,0,0,0,88,86,1,0,0,0,89,82,1,0,0,0,89,86,1,0,0,0,90,1,1,0,0,0,91,92,5,
		1,0,0,92,93,3,80,40,0,93,94,3,0,0,0,94,3,1,0,0,0,95,100,3,6,3,0,96,100,
		3,8,4,0,97,100,3,12,6,0,98,100,3,18,9,0,99,95,1,0,0,0,99,96,1,0,0,0,99,
		97,1,0,0,0,99,98,1,0,0,0,100,5,1,0,0,0,101,102,5,2,0,0,102,103,3,56,28,
		0,103,104,3,32,16,0,104,7,1,0,0,0,105,106,5,3,0,0,106,107,3,56,28,0,107,
		108,3,72,36,0,108,110,5,4,0,0,109,111,3,10,5,0,110,109,1,0,0,0,110,111,
		1,0,0,0,111,112,1,0,0,0,112,113,5,5,0,0,113,115,5,6,0,0,114,116,3,34,17,
		0,115,114,1,0,0,0,115,116,1,0,0,0,116,117,1,0,0,0,117,118,5,7,0,0,118,
		9,1,0,0,0,119,120,3,56,28,0,120,125,3,72,36,0,121,122,5,8,0,0,122,123,
		3,56,28,0,123,124,3,72,36,0,124,126,1,0,0,0,125,121,1,0,0,0,125,126,1,
		0,0,0,126,11,1,0,0,0,127,130,3,14,7,0,128,130,3,16,8,0,129,127,1,0,0,0,
		129,128,1,0,0,0,130,13,1,0,0,0,131,132,5,9,0,0,132,133,3,72,36,0,133,138,
		5,6,0,0,134,135,5,10,0,0,135,136,3,50,25,0,136,137,5,8,0,0,137,139,1,0,
		0,0,138,134,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,0,140,141,5,11,0,0,141,
		142,3,50,25,0,142,143,5,12,0,0,143,146,3,50,25,0,144,145,5,8,0,0,145,147,
		3,26,13,0,146,144,1,0,0,0,146,147,1,0,0,0,147,148,1,0,0,0,148,149,5,7,
		0,0,149,15,1,0,0,0,150,151,5,13,0,0,151,152,3,72,36,0,152,153,5,6,0,0,
		153,154,5,14,0,0,154,155,3,70,35,0,155,156,5,15,0,0,156,157,5,16,0,0,157,
		165,3,70,35,0,158,159,5,15,0,0,159,160,5,17,0,0,160,162,5,6,0,0,161,163,
		3,20,10,0,162,161,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,166,5,7,
		0,0,165,158,1,0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,168,5,15,0,0,168,
		169,5,18,0,0,169,170,5,6,0,0,170,171,3,24,12,0,171,174,5,7,0,0,172,173,
		5,15,0,0,173,175,3,26,13,0,174,172,1,0,0,0,174,175,1,0,0,0,175,177,1,0,
		0,0,176,178,5,15,0,0,177,176,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,
		180,5,7,0,0,180,17,1,0,0,0,181,182,5,19,0,0,182,183,5,6,0,0,183,184,5,
		20,0,0,184,185,3,68,34,0,185,186,5,8,0,0,186,187,5,21,0,0,187,188,3,50,
		25,0,188,189,5,8,0,0,189,190,5,22,0,0,190,191,3,50,25,0,191,192,5,7,0,
		0,192,19,1,0,0,0,193,198,3,22,11,0,194,195,5,15,0,0,195,197,3,22,11,0,
		196,194,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,202,
		1,0,0,0,200,198,1,0,0,0,201,203,5,15,0,0,202,201,1,0,0,0,202,203,1,0,0,
		0,203,21,1,0,0,0,204,205,3,68,34,0,205,206,5,23,0,0,206,207,3,70,35,0,
		207,23,1,0,0,0,208,211,3,72,36,0,209,210,5,24,0,0,210,212,3,72,36,0,211,
		209,1,0,0,0,212,213,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,25,1,0,
		0,0,215,216,5,25,0,0,216,217,5,26,0,0,217,218,3,28,14,0,218,219,5,27,0,
		0,219,27,1,0,0,0,220,225,3,30,15,0,221,222,5,8,0,0,222,224,3,30,15,0,223,
		221,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,29,1,0,
		0,0,227,225,1,0,0,0,228,229,7,0,0,0,229,31,1,0,0,0,230,231,3,72,36,0,231,
		232,5,34,0,0,232,233,3,50,25,0,233,234,5,15,0,0,234,33,1,0,0,0,235,236,
		6,17,-1,0,236,244,3,36,18,0,237,244,3,32,16,0,238,239,3,56,28,0,239,240,
		3,32,16,0,240,244,1,0,0,0,241,244,3,38,19,0,242,244,3,48,24,0,243,235,
		1,0,0,0,243,237,1,0,0,0,243,238,1,0,0,0,243,241,1,0,0,0,243,242,1,0,0,
		0,244,250,1,0,0,0,245,246,10,1,0,0,246,247,5,15,0,0,247,249,3,34,17,2,
		248,245,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,35,
		1,0,0,0,252,250,1,0,0,0,253,254,5,35,0,0,254,255,3,50,25,0,255,256,5,36,
		0,0,256,257,3,46,23,0,257,37,1,0,0,0,258,259,5,37,0,0,259,260,3,50,25,
		0,260,264,3,46,23,0,261,263,3,40,20,0,262,261,1,0,0,0,263,266,1,0,0,0,
		264,262,1,0,0,0,264,265,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,267,269,
		3,42,21,0,268,267,1,0,0,0,268,269,1,0,0,0,269,39,1,0,0,0,270,271,5,38,
		0,0,271,272,3,50,25,0,272,273,3,46,23,0,273,41,1,0,0,0,274,275,5,39,0,
		0,275,276,3,46,23,0,276,43,1,0,0,0,277,278,5,38,0,0,278,279,3,50,25,0,
		279,280,5,6,0,0,280,281,3,34,17,0,281,282,5,7,0,0,282,283,3,44,22,0,283,
		286,1,0,0,0,284,286,1,0,0,0,285,277,1,0,0,0,285,284,1,0,0,0,286,45,1,0,
		0,0,287,289,5,6,0,0,288,290,3,34,17,0,289,288,1,0,0,0,289,290,1,0,0,0,
		290,291,1,0,0,0,291,292,5,7,0,0,292,47,1,0,0,0,293,294,5,40,0,0,294,295,
		3,50,25,0,295,296,5,15,0,0,296,49,1,0,0,0,297,298,6,25,-1,0,298,302,3,
		52,26,0,299,300,7,1,0,0,300,302,3,50,25,7,301,297,1,0,0,0,301,299,1,0,
		0,0,302,323,1,0,0,0,303,304,10,6,0,0,304,305,7,2,0,0,305,322,3,50,25,7,
		306,307,10,5,0,0,307,308,7,3,0,0,308,322,3,50,25,6,309,310,10,4,0,0,310,
		311,7,4,0,0,311,322,3,50,25,5,312,313,10,3,0,0,313,314,7,5,0,0,314,322,
		3,50,25,4,315,316,10,2,0,0,316,317,5,52,0,0,317,322,3,50,25,3,318,319,
		10,1,0,0,319,320,5,53,0,0,320,322,3,50,25,2,321,303,1,0,0,0,321,306,1,
		0,0,0,321,309,1,0,0,0,321,312,1,0,0,0,321,315,1,0,0,0,321,318,1,0,0,0,
		322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,51,1,0,0,0,325,323,
		1,0,0,0,326,335,3,54,27,0,327,335,3,68,34,0,328,335,3,80,40,0,329,335,
		3,78,39,0,330,335,3,76,38,0,331,335,3,74,37,0,332,335,3,58,29,0,333,335,
		3,60,30,0,334,326,1,0,0,0,334,327,1,0,0,0,334,328,1,0,0,0,334,329,1,0,
		0,0,334,330,1,0,0,0,334,331,1,0,0,0,334,332,1,0,0,0,334,333,1,0,0,0,335,
		53,1,0,0,0,336,337,3,68,34,0,337,339,5,4,0,0,338,340,3,66,33,0,339,338,
		1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,342,5,5,0,0,342,55,1,0,0,0,
		343,347,5,55,0,0,344,347,3,62,31,0,345,347,3,64,32,0,346,343,1,0,0,0,346,
		344,1,0,0,0,346,345,1,0,0,0,347,57,1,0,0,0,348,352,5,6,0,0,349,351,3,52,
		26,0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,
		359,1,0,0,0,354,352,1,0,0,0,355,356,5,8,0,0,356,358,3,52,26,0,357,355,
		1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,362,1,0,0,
		0,361,359,1,0,0,0,362,363,5,7,0,0,363,59,1,0,0,0,364,365,3,68,34,0,365,
		366,5,26,0,0,366,367,3,50,25,0,367,368,5,27,0,0,368,61,1,0,0,0,369,370,
		5,26,0,0,370,371,3,56,28,0,371,372,5,27,0,0,372,63,1,0,0,0,373,374,3,68,
		34,0,374,375,5,24,0,0,375,376,3,68,34,0,376,65,1,0,0,0,377,382,3,68,34,
		0,378,379,5,8,0,0,379,381,3,68,34,0,380,378,1,0,0,0,381,384,1,0,0,0,382,
		380,1,0,0,0,382,383,1,0,0,0,383,67,1,0,0,0,384,382,1,0,0,0,385,390,3,72,
		36,0,386,387,5,54,0,0,387,389,3,72,36,0,388,386,1,0,0,0,389,392,1,0,0,
		0,390,388,1,0,0,0,390,391,1,0,0,0,391,69,1,0,0,0,392,390,1,0,0,0,393,398,
		3,72,36,0,394,395,5,8,0,0,395,397,3,72,36,0,396,394,1,0,0,0,397,400,1,
		0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,71,1,0,0,0,400,398,1,0,0,0,401,
		402,5,56,0,0,402,73,1,0,0,0,403,404,5,57,0,0,404,75,1,0,0,0,405,406,5,
		58,0,0,406,77,1,0,0,0,407,408,5,59,0,0,408,79,1,0,0,0,409,410,5,60,0,0,
		410,81,1,0,0,0,34,86,89,99,110,115,125,129,138,146,162,165,174,177,198,
		202,213,225,243,250,264,268,285,289,301,321,323,334,339,346,352,359,382,
		390,398
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
