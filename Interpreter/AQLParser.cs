//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/thoma/Documents/VSCODE/AQL/Interpreter/AQL.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, IDENTIFIER=55, BOOL=56, INT=57, DOUBLE=58, STRING=59, 
		WS=60, WHITESPACE=61, TABS=62, NEWLINES=63, COMMENTS=64, ONE_LINE_COMMENT=65, 
		MULTI_LINE_COMMENT=66;
	public const int
		RULE_programEOF = 0, RULE_program = 1, RULE_importStatement = 2, RULE_definition = 3, 
		RULE_functionDefinition = 4, RULE_constDefinition = 5, RULE_formalParameterList = 6, 
		RULE_networks = 7, RULE_queueDefinition = 8, RULE_networkDefinition = 9, 
		RULE_networkExpression = 10, RULE_inputOutputNetworkExpression = 11, RULE_instanceNetworkExpression = 12, 
		RULE_routesList = 13, RULE_routes = 14, RULE_routesId = 15, RULE_routesValue = 16, 
		RULE_probabilityIdList = 17, RULE_metrics = 18, RULE_metric = 19, RULE_namedMetric = 20, 
		RULE_simulateDefinition = 21, RULE_statement = 22, RULE_whileStatement = 23, 
		RULE_variableDeclarationStatement = 24, RULE_assignStatement = 25, RULE_ifStatement = 26, 
		RULE_elseIfStatement = 27, RULE_elseStatement = 28, RULE_block = 29, RULE_returnStatement = 30, 
		RULE_expressionList = 31, RULE_expression = 32, RULE_operator = 33, RULE_andOperator = 34, 
		RULE_orOperator = 35, RULE_addOperator = 36, RULE_subtractOperator = 37, 
		RULE_divisionOperator = 38, RULE_equalOperator = 39, RULE_inEqualOperator = 40, 
		RULE_greaterThanOperator = 41, RULE_greaterThanOrEqualOperator = 42, RULE_lessThanOperator = 43, 
		RULE_lessThanOrEqualOperator = 44, RULE_unaryExpression = 45, RULE_negationExpression = 46, 
		RULE_negativeExpression = 47, RULE_parenthesesExpression = 48, RULE_value = 49, 
		RULE_functionCall = 50, RULE_arrayInitialization = 51, RULE_arrayIndexing = 52, 
		RULE_type = 53, RULE_typeKeyword = 54, RULE_boolKeyword = 55, RULE_intKeyword = 56, 
		RULE_doubleKeyword = 57, RULE_stringKeyword = 58, RULE_arrayType = 59, 
		RULE_anyIdentifier = 60, RULE_qualifiedId = 61, RULE_idList = 62, RULE_identifier = 63, 
		RULE_bool = 64, RULE_int = 65, RULE_double = 66, RULE_string = 67;
	public static readonly string[] ruleNames = {
		"programEOF", "program", "importStatement", "definition", "functionDefinition", 
		"constDefinition", "formalParameterList", "networks", "queueDefinition", 
		"networkDefinition", "networkExpression", "inputOutputNetworkExpression", 
		"instanceNetworkExpression", "routesList", "routes", "routesId", "routesValue", 
		"probabilityIdList", "metrics", "metric", "namedMetric", "simulateDefinition", 
		"statement", "whileStatement", "variableDeclarationStatement", "assignStatement", 
		"ifStatement", "elseIfStatement", "elseStatement", "block", "returnStatement", 
		"expressionList", "expression", "operator", "andOperator", "orOperator", 
		"addOperator", "subtractOperator", "divisionOperator", "equalOperator", 
		"inEqualOperator", "greaterThanOperator", "greaterThanOrEqualOperator", 
		"lessThanOperator", "lessThanOrEqualOperator", "unaryExpression", "negationExpression", 
		"negativeExpression", "parenthesesExpression", "value", "functionCall", 
		"arrayInitialization", "arrayIndexing", "type", "typeKeyword", "boolKeyword", 
		"intKeyword", "doubleKeyword", "stringKeyword", "arrayType", "anyIdentifier", 
		"qualifiedId", "idList", "identifier", "bool", "int", "double", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'function'", "'('", "')'", "'const'", "','", "'queue'", 
		"'{'", "'servers:'", "';'", "'service:'", "'capacity:'", "'}'", "'network'", 
		"'|'", "':'", "'->'", "'['", "']'", "'*'", "'mrt'", "'vrt'", "'utilization'", 
		"'throughput'", "'num'", "'avgNum'", "'simulate'", "'run:'", "'until:'", 
		"'times:'", "'while'", "'do'", "'='", "'if'", "'else if'", "'else'", "'return'", 
		"'&&'", "'||'", "'+'", "'-'", "'/'", "'=='", "'!='", "'>'", "'>='", "'<'", 
		"'<='", "'!'", "'bool'", "'int'", "'double'", "'string'", "'.'", null, 
		null, null, null, null, null, "' '", "'\\t'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "IDENTIFIER", "BOOL", "INT", 
		"DOUBLE", "STRING", "WS", "WHITESPACE", "TABS", "NEWLINES", "COMMENTS", 
		"ONE_LINE_COMMENT", "MULTI_LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramEOFContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AQLParser.Eof, 0); }
		public ProgramEOFContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programEOF; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramEOF(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramEOFContext programEOF() {
		ProgramEOFContext _localctx = new ProgramEOFContext(Context, State);
		EnterRule(_localctx, 0, RULE_programEOF);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			program();
			State = 137;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 139;
					importStatement();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 134234276L) != 0)) {
					{
					State = 142;
					definition();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(T__0);
			State = 148;
			identifier();
			State = 149;
			program();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstDefinitionContext constDefinition() {
			return GetRuleContext<ConstDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NetworksContext networks() {
			return GetRuleContext<NetworksContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimulateDefinitionContext simulateDefinition() {
			return GetRuleContext<SimulateDefinitionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_definition);
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				functionDefinition();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				constDefinition();
				}
				break;
			case T__6:
			case T__13:
				EnterOuterAlt(_localctx, 3);
				{
				State = 153;
				networks();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 4);
				{
				State = 154;
				simulateDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public TypeContext returnType;
		public DefinitionContext nextDefinition;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(T__1);
			State = 158;
			_localctx.returnType = type();
			State = 159;
			identifier();
			State = 160;
			Match(T__2);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16888498602901504L) != 0)) {
				{
				State = 161;
				formalParameterList();
				}
			}

			State = 164;
			Match(T__3);
			State = 165;
			block();
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 134234276L) != 0)) {
				{
				State = 166;
				_localctx.nextDefinition = definition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDefinitionContext : ParserRuleContext {
		public DefinitionContext nextDefinition;
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public ConstDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDefinitionContext constDefinition() {
		ConstDefinitionContext _localctx = new ConstDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_constDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(T__4);
			State = 170;
			type();
			State = 171;
			assignStatement();
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 134234276L) != 0)) {
				{
				State = 172;
				_localctx.nextDefinition = definition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 12, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			type();
			State = 176;
			identifier();
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 177;
				Match(T__5);
				State = 178;
				type();
				State = 179;
				identifier();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NetworksContext : ParserRuleContext {
		public DefinitionContext nextDefinition;
		[System.Diagnostics.DebuggerNonUserCode] public QueueDefinitionContext queueDefinition() {
			return GetRuleContext<QueueDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NetworkDefinitionContext networkDefinition() {
			return GetRuleContext<NetworkDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public NetworksContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_networks; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetworks(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NetworksContext networks() {
		NetworksContext _localctx = new NetworksContext(Context, State);
		EnterRule(_localctx, 14, RULE_networks);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				{
				State = 186;
				queueDefinition();
				}
				break;
			case T__13:
				{
				State = 187;
				networkDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 134234276L) != 0)) {
				{
				State = 190;
				_localctx.nextDefinition = definition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueueDefinitionContext : ParserRuleContext {
		public ExpressionContext numberOfServers;
		public ExpressionContext service;
		public ExpressionContext capacity;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetricsContext metrics() {
			return GetRuleContext<MetricsContext>(0);
		}
		public QueueDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queueDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueueDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueueDefinitionContext queueDefinition() {
		QueueDefinitionContext _localctx = new QueueDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_queueDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(T__6);
			State = 194;
			identifier();
			State = 195;
			Match(T__7);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 196;
				Match(T__8);
				State = 197;
				_localctx.numberOfServers = expression(0);
				State = 198;
				Match(T__9);
				}
			}

			State = 202;
			Match(T__10);
			State = 203;
			_localctx.service = expression(0);
			State = 204;
			Match(T__9);
			State = 205;
			Match(T__11);
			State = 206;
			_localctx.capacity = expression(0);
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 207;
				Match(T__9);
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 208;
					metrics();
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__9) {
						{
						State = 209;
						Match(T__9);
						}
					}

					}
				}

				}
			}

			State = 216;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NetworkDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NetworkExpressionContext[] networkExpression() {
			return GetRuleContexts<NetworkExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NetworkExpressionContext networkExpression(int i) {
			return GetRuleContext<NetworkExpressionContext>(i);
		}
		public NetworkDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_networkDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetworkDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NetworkDefinitionContext networkDefinition() {
		NetworkDefinitionContext _localctx = new NetworkDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_networkDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(T__13);
			State = 219;
			identifier();
			State = 220;
			Match(T__7);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1116892707588931840L) != 0)) {
				{
				State = 221;
				networkExpression();
				}
			}

			State = 228;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 224;
					Match(T__9);
					State = 225;
					networkExpression();
					}
					} 
				}
				State = 230;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 231;
				Match(T__9);
				}
			}

			State = 234;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NetworkExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputOutputNetworkExpressionContext inputOutputNetworkExpression() {
			return GetRuleContext<InputOutputNetworkExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstanceNetworkExpressionContext instanceNetworkExpression() {
			return GetRuleContext<InstanceNetworkExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutesContext routes() {
			return GetRuleContext<RoutesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetricsContext metrics() {
			return GetRuleContext<MetricsContext>(0);
		}
		public NetworkExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_networkExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetworkExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NetworkExpressionContext networkExpression() {
		NetworkExpressionContext _localctx = new NetworkExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_networkExpression);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				inputOutputNetworkExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237;
				instanceNetworkExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 238;
				routes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 239;
				metrics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputOutputNetworkExpressionContext : ParserRuleContext {
		public IdListContext inputs;
		public IdListContext outputs;
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext[] idList() {
			return GetRuleContexts<IdListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext idList(int i) {
			return GetRuleContext<IdListContext>(i);
		}
		public InputOutputNetworkExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputOutputNetworkExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputOutputNetworkExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputOutputNetworkExpressionContext inputOutputNetworkExpression() {
		InputOutputNetworkExpressionContext _localctx = new InputOutputNetworkExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_inputOutputNetworkExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			_localctx.inputs = idList();
			State = 243;
			Match(T__14);
			State = 244;
			_localctx.outputs = idList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceNetworkExpressionContext : ParserRuleContext {
		public AnyIdentifierContext existing;
		public IdListContext @new;
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext anyIdentifier() {
			return GetRuleContext<AnyIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public InstanceNetworkExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceNetworkExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceNetworkExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceNetworkExpressionContext instanceNetworkExpression() {
		InstanceNetworkExpressionContext _localctx = new InstanceNetworkExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_instanceNetworkExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_localctx.existing = anyIdentifier();
			State = 247;
			Match(T__15);
			State = 248;
			_localctx.@new = idList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoutesContext[] routes() {
			return GetRuleContexts<RoutesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutesContext routes(int i) {
			return GetRuleContext<RoutesContext>(i);
		}
		public RoutesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutesListContext routesList() {
		RoutesListContext _localctx = new RoutesListContext(Context, State);
		EnterRule(_localctx, 26, RULE_routesList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			routes();
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 251;
				Match(T__5);
				State = 252;
				routes();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoutesIdContext routesId() {
			return GetRuleContext<RoutesIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutesValueContext routesValue() {
			return GetRuleContext<RoutesValueContext>(0);
		}
		public RoutesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutesContext routes() {
		RoutesContext _localctx = new RoutesContext(Context, State);
		EnterRule(_localctx, 28, RULE_routes);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258;
				routesId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				routesValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutesIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext[] anyIdentifier() {
			return GetRuleContexts<AnyIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext anyIdentifier(int i) {
			return GetRuleContext<AnyIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutesIdContext routesId() {
			return GetRuleContext<RoutesIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProbabilityIdListContext probabilityIdList() {
			return GetRuleContext<ProbabilityIdListContext>(0);
		}
		public RoutesIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routesId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutesId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutesIdContext routesId() {
		RoutesIdContext _localctx = new RoutesIdContext(Context, State);
		EnterRule(_localctx, 30, RULE_routesId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			anyIdentifier();
			State = 263;
			Match(T__16);
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 264;
				routesId();
				}
				break;
			case 2:
				{
				State = 265;
				anyIdentifier();
				}
				break;
			case 3:
				{
				State = 266;
				probabilityIdList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutesValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutesIdContext routesId() {
			return GetRuleContext<RoutesIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext anyIdentifier() {
			return GetRuleContext<AnyIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProbabilityIdListContext probabilityIdList() {
			return GetRuleContext<ProbabilityIdListContext>(0);
		}
		public RoutesValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routesValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutesValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutesValueContext routesValue() {
		RoutesValueContext _localctx = new RoutesValueContext(Context, State);
		EnterRule(_localctx, 32, RULE_routesValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			value();
			State = 270;
			Match(T__16);
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 271;
				routesId();
				}
				break;
			case 2:
				{
				State = 272;
				anyIdentifier();
				}
				break;
			case 3:
				{
				State = 273;
				probabilityIdList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProbabilityIdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext[] anyIdentifier() {
			return GetRuleContexts<AnyIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext anyIdentifier(int i) {
			return GetRuleContext<AnyIdentifierContext>(i);
		}
		public ProbabilityIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_probabilityIdList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProbabilityIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProbabilityIdListContext probabilityIdList() {
		ProbabilityIdListContext _localctx = new ProbabilityIdListContext(Context, State);
		EnterRule(_localctx, 34, RULE_probabilityIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(T__17);
			State = 277;
			expression(0);
			State = 278;
			anyIdentifier();
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 279;
				Match(T__5);
				State = 280;
				expression(0);
				State = 281;
				anyIdentifier();
				}
				}
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 288;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetricsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetricContext[] metric() {
			return GetRuleContexts<MetricContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetricContext metric(int i) {
			return GetRuleContext<MetricContext>(i);
		}
		public MetricsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metrics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetrics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetricsContext metrics() {
		MetricsContext _localctx = new MetricsContext(Context, State);
		EnterRule(_localctx, 36, RULE_metrics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			Match(T__19);
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 132120576L) != 0)) {
				{
				State = 291;
				metric();
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 292;
					Match(T__5);
					State = 293;
					metric();
					}
					}
					State = 298;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 301;
			Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetricContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedMetricContext namedMetric() {
			return GetRuleContext<NamedMetricContext>(0);
		}
		public MetricContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetricContext metric() {
		MetricContext _localctx = new MetricContext(Context, State);
		EnterRule(_localctx, 38, RULE_metric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			namedMetric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedMetricContext : ParserRuleContext {
		public NamedMetricContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedMetric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedMetric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedMetricContext namedMetric() {
		NamedMetricContext _localctx = new NamedMetricContext(Context, State);
		EnterRule(_localctx, 40, RULE_namedMetric);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 132120576L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimulateDefinitionContext : ParserRuleContext {
		public AnyIdentifierContext network;
		public ExpressionContext terminationCriteria;
		public ExpressionContext runs;
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext anyIdentifier() {
			return GetRuleContext<AnyIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SimulateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simulateDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimulateDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimulateDefinitionContext simulateDefinition() {
		SimulateDefinitionContext _localctx = new SimulateDefinitionContext(Context, State);
		EnterRule(_localctx, 42, RULE_simulateDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(T__26);
			State = 308;
			Match(T__7);
			State = 309;
			Match(T__27);
			State = 310;
			_localctx.network = anyIdentifier();
			State = 311;
			Match(T__9);
			State = 312;
			Match(T__28);
			State = 313;
			_localctx.terminationCriteria = expression(0);
			State = 314;
			Match(T__9);
			State = 315;
			Match(T__29);
			State = 316;
			_localctx.runs = expression(0);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 317;
				Match(T__9);
				}
			}

			State = 320;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_statement);
		try {
			State = 327;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__30:
				EnterOuterAlt(_localctx, 1);
				{
				State = 322;
				whileStatement();
				}
				break;
			case T__17:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323;
				variableDeclarationStatement();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 324;
				assignStatement();
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 4);
				{
				State = 325;
				ifStatement();
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 5);
				{
				State = 326;
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext condition;
		public BlockContext body;
		public StatementContext nextStatement;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(T__30);
			State = 330;
			_localctx.condition = expression(0);
			State = 331;
			Match(T__31);
			State = 332;
			_localctx.body = block();
			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 333;
				_localctx.nextStatement = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		public StatementContext nextStatement;
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_variableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			type();
			State = 337;
			assignStatement();
			State = 339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 338;
				_localctx.nextStatement = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		public StatementContext nextStatement;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_assignStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			identifier();
			State = 342;
			Match(T__32);
			State = 343;
			expression(0);
			State = 344;
			Match(T__9);
			State = 346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 345;
				_localctx.nextStatement = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext ifCondition;
		public BlockContext ifBody;
		public ElseIfStatementContext _elseIfStatement;
		public IList<ElseIfStatementContext> _elseIfStatements = new List<ElseIfStatementContext>();
		public StatementContext nextStatement;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			Match(T__33);
			State = 349;
			_localctx.ifCondition = expression(0);
			State = 350;
			_localctx.ifBody = block();
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__34) {
				{
				{
				State = 351;
				_localctx._elseIfStatement = elseIfStatement();
				_localctx._elseIfStatements.Add(_localctx._elseIfStatement);
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__35) {
				{
				State = 357;
				elseStatement();
				}
			}

			State = 361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 360;
				_localctx.nextStatement = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ExpressionContext condition;
		public BlockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(T__34);
			State = 364;
			_localctx.condition = expression(0);
			State = 365;
			_localctx.body = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public BlockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(T__35);
			State = 368;
			_localctx.body = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(T__7);
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 52917452388171776L) != 0)) {
				{
				State = 371;
				statement();
				}
			}

			State = 374;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(T__36);
			State = 377;
			expression(0);
			State = 378;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 62, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			expression(0);
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 381;
				Match(T__5);
				State = 382;
				expression(0);
				}
				}
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 389;
			unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 397;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 391;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 392;
					@operator();
					State = 393;
					expression(3);
					}
					} 
				}
				State = 399;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndOperatorContext andOperator() {
			return GetRuleContext<AndOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrOperatorContext orOperator() {
			return GetRuleContext<OrOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorContext addOperator() {
			return GetRuleContext<AddOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubtractOperatorContext subtractOperator() {
			return GetRuleContext<SubtractOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DivisionOperatorContext divisionOperator() {
			return GetRuleContext<DivisionOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualOperatorContext equalOperator() {
			return GetRuleContext<EqualOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InEqualOperatorContext inEqualOperator() {
			return GetRuleContext<InEqualOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GreaterThanOperatorContext greaterThanOperator() {
			return GetRuleContext<GreaterThanOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GreaterThanOrEqualOperatorContext greaterThanOrEqualOperator() {
			return GetRuleContext<GreaterThanOrEqualOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LessThanOperatorContext lessThanOperator() {
			return GetRuleContext<LessThanOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LessThanOrEqualOperatorContext lessThanOrEqualOperator() {
			return GetRuleContext<LessThanOrEqualOperatorContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 66, RULE_operator);
		try {
			State = 411;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__37:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400;
				andOperator();
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401;
				orOperator();
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 3);
				{
				State = 402;
				addOperator();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 4);
				{
				State = 403;
				subtractOperator();
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 5);
				{
				State = 404;
				divisionOperator();
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 6);
				{
				State = 405;
				equalOperator();
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 7);
				{
				State = 406;
				inEqualOperator();
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 8);
				{
				State = 407;
				greaterThanOperator();
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 9);
				{
				State = 408;
				greaterThanOrEqualOperator();
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 10);
				{
				State = 409;
				lessThanOperator();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 11);
				{
				State = 410;
				lessThanOrEqualOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndOperatorContext : ParserRuleContext {
		public AndOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndOperatorContext andOperator() {
		AndOperatorContext _localctx = new AndOperatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_andOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(T__37);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrOperatorContext : ParserRuleContext {
		public OrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrOperatorContext orOperator() {
		OrOperatorContext _localctx = new OrOperatorContext(Context, State);
		EnterRule(_localctx, 70, RULE_orOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(T__38);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOperatorContext : ParserRuleContext {
		public AddOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOperatorContext addOperator() {
		AddOperatorContext _localctx = new AddOperatorContext(Context, State);
		EnterRule(_localctx, 72, RULE_addOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			Match(T__39);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractOperatorContext : ParserRuleContext {
		public SubtractOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtractOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubtractOperatorContext subtractOperator() {
		SubtractOperatorContext _localctx = new SubtractOperatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_subtractOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(T__40);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivisionOperatorContext : ParserRuleContext {
		public DivisionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divisionOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivisionOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivisionOperatorContext divisionOperator() {
		DivisionOperatorContext _localctx = new DivisionOperatorContext(Context, State);
		EnterRule(_localctx, 76, RULE_divisionOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(T__41);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualOperatorContext : ParserRuleContext {
		public EqualOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualOperatorContext equalOperator() {
		EqualOperatorContext _localctx = new EqualOperatorContext(Context, State);
		EnterRule(_localctx, 78, RULE_equalOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InEqualOperatorContext : ParserRuleContext {
		public InEqualOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inEqualOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InEqualOperatorContext inEqualOperator() {
		InEqualOperatorContext _localctx = new InEqualOperatorContext(Context, State);
		EnterRule(_localctx, 80, RULE_inEqualOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			Match(T__43);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GreaterThanOperatorContext : ParserRuleContext {
		public GreaterThanOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_greaterThanOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GreaterThanOperatorContext greaterThanOperator() {
		GreaterThanOperatorContext _localctx = new GreaterThanOperatorContext(Context, State);
		EnterRule(_localctx, 82, RULE_greaterThanOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GreaterThanOrEqualOperatorContext : ParserRuleContext {
		public GreaterThanOrEqualOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_greaterThanOrEqualOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanOrEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GreaterThanOrEqualOperatorContext greaterThanOrEqualOperator() {
		GreaterThanOrEqualOperatorContext _localctx = new GreaterThanOrEqualOperatorContext(Context, State);
		EnterRule(_localctx, 84, RULE_greaterThanOrEqualOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LessThanOperatorContext : ParserRuleContext {
		public LessThanOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lessThanOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LessThanOperatorContext lessThanOperator() {
		LessThanOperatorContext _localctx = new LessThanOperatorContext(Context, State);
		EnterRule(_localctx, 86, RULE_lessThanOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(T__46);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LessThanOrEqualOperatorContext : ParserRuleContext {
		public LessThanOrEqualOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lessThanOrEqualOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanOrEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LessThanOrEqualOperatorContext lessThanOrEqualOperator() {
		LessThanOrEqualOperatorContext _localctx = new LessThanOrEqualOperatorContext(Context, State);
		EnterRule(_localctx, 88, RULE_lessThanOrEqualOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(T__47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegationExpressionContext negationExpression() {
			return GetRuleContext<NegationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegativeExpressionContext negativeExpression() {
			return GetRuleContext<NegativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesExpressionContext parenthesesExpression() {
			return GetRuleContext<ParenthesesExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_unaryExpression);
		try {
			State = 439;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__48:
				EnterOuterAlt(_localctx, 1);
				{
				State = 435;
				negationExpression();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 2);
				{
				State = 436;
				negativeExpression();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 437;
				parenthesesExpression();
				}
				break;
			case T__7:
			case IDENTIFIER:
			case BOOL:
			case INT:
			case DOUBLE:
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 438;
				value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationExpressionContext negationExpression() {
		NegationExpressionContext _localctx = new NegationExpressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_negationExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(T__48);
			State = 442;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegativeExpressionContext negativeExpression() {
		NegativeExpressionContext _localctx = new NegativeExpressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_negativeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(T__40);
			State = 445;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesesExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesesExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesesExpressionContext parenthesesExpression() {
		ParenthesesExpressionContext _localctx = new ParenthesesExpressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_parenthesesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			Match(T__2);
			State = 448;
			expression(0);
			State = 449;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext anyIdentifier() {
			return GetRuleContext<AnyIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoubleContext @double() {
			return GetRuleContext<DoubleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializationContext arrayInitialization() {
			return GetRuleContext<ArrayInitializationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexingContext arrayIndexing() {
			return GetRuleContext<ArrayIndexingContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 98, RULE_value);
		try {
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 451;
				functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 452;
				anyIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 453;
				@string();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 454;
				@double();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 455;
				@int();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 456;
				@bool();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 457;
				arrayInitialization();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 458;
				arrayIndexing();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public AnyIdentifierContext functionIdentifier;
		public ExpressionListContext parameters;
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext anyIdentifier() {
			return GetRuleContext<AnyIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 100, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			_localctx.functionIdentifier = anyIdentifier();
			State = 462;
			Match(T__2);
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1117457856564560136L) != 0)) {
				{
				State = 463;
				_localctx.parameters = expressionList();
				}
			}

			State = 466;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayInitializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitialization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitialization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializationContext arrayInitialization() {
		ArrayInitializationContext _localctx = new ArrayInitializationContext(Context, State);
		EnterRule(_localctx, 102, RULE_arrayInitialization);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			Match(T__7);
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1117457856564560136L) != 0)) {
				{
				{
				State = 469;
				expression(0);
				}
				}
				State = 474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 475;
				Match(T__5);
				State = 476;
				expression(0);
				}
				}
				State = 481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 482;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexingContext : ParserRuleContext {
		public IdentifierContext target;
		public ExpressionContext index;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayIndexingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexingContext arrayIndexing() {
		ArrayIndexingContext _localctx = new ArrayIndexingContext(Context, State);
		EnterRule(_localctx, 104, RULE_arrayIndexing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			_localctx.target = identifier();
			State = 485;
			Match(T__17);
			State = 486;
			_localctx.index = expression(0);
			State = 487;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeKeywordContext typeKeyword() {
			return GetRuleContext<TypeKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 106, RULE_type);
		try {
			State = 491;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__49:
			case T__50:
			case T__51:
			case T__52:
				EnterOuterAlt(_localctx, 1);
				{
				State = 489;
				typeKeyword();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				State = 490;
				arrayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolKeywordContext boolKeyword() {
			return GetRuleContext<BoolKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntKeywordContext intKeyword() {
			return GetRuleContext<IntKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoubleKeywordContext doubleKeyword() {
			return GetRuleContext<DoubleKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringKeywordContext stringKeyword() {
			return GetRuleContext<StringKeywordContext>(0);
		}
		public TypeKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeKeywordContext typeKeyword() {
		TypeKeywordContext _localctx = new TypeKeywordContext(Context, State);
		EnterRule(_localctx, 108, RULE_typeKeyword);
		try {
			State = 497;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__49:
				EnterOuterAlt(_localctx, 1);
				{
				State = 493;
				boolKeyword();
				}
				break;
			case T__50:
				EnterOuterAlt(_localctx, 2);
				{
				State = 494;
				intKeyword();
				}
				break;
			case T__51:
				EnterOuterAlt(_localctx, 3);
				{
				State = 495;
				doubleKeyword();
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 4);
				{
				State = 496;
				stringKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolKeywordContext : ParserRuleContext {
		public BoolKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolKeywordContext boolKeyword() {
		BoolKeywordContext _localctx = new BoolKeywordContext(Context, State);
		EnterRule(_localctx, 110, RULE_boolKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			Match(T__49);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntKeywordContext : ParserRuleContext {
		public IntKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntKeywordContext intKeyword() {
		IntKeywordContext _localctx = new IntKeywordContext(Context, State);
		EnterRule(_localctx, 112, RULE_intKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			Match(T__50);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleKeywordContext : ParserRuleContext {
		public DoubleKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleKeywordContext doubleKeyword() {
		DoubleKeywordContext _localctx = new DoubleKeywordContext(Context, State);
		EnterRule(_localctx, 114, RULE_doubleKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			Match(T__51);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringKeywordContext : ParserRuleContext {
		public StringKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringKeywordContext stringKeyword() {
		StringKeywordContext _localctx = new StringKeywordContext(Context, State);
		EnterRule(_localctx, 116, RULE_stringKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			Match(T__52);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(T__17);
			State = 508;
			type();
			State = 509;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdContext qualifiedId() {
			return GetRuleContext<QualifiedIdContext>(0);
		}
		public AnyIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyIdentifierContext anyIdentifier() {
		AnyIdentifierContext _localctx = new AnyIdentifierContext(Context, State);
		EnterRule(_localctx, 120, RULE_anyIdentifier);
		try {
			State = 513;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 511;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 512;
				qualifiedId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdContext : ParserRuleContext {
		public IdentifierContext left;
		public IdentifierContext right;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public QualifiedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdContext qualifiedId() {
		QualifiedIdContext _localctx = new QualifiedIdContext(Context, State);
		EnterRule(_localctx, 122, RULE_qualifiedId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			_localctx.left = identifier();
			State = 516;
			Match(T__53);
			State = 517;
			_localctx.right = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 124, RULE_idList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			identifier();
			State = 524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 520;
				Match(T__5);
				State = 521;
				identifier();
				}
				}
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AQLParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 126, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(AQLParser.BOOL, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 128, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AQLParser.INT, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 130, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(AQLParser.DOUBLE, 0); }
		public DoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleContext @double() {
		DoubleContext _localctx = new DoubleContext(Context, State);
		EnterRule(_localctx, 132, RULE_double);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(DOUBLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AQLParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 134, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,66,538,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,0,1,1,3,1,141,8,1,1,
		1,3,1,144,8,1,3,1,146,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,156,8,3,
		1,4,1,4,1,4,1,4,1,4,3,4,163,8,4,1,4,1,4,1,4,3,4,168,8,4,1,5,1,5,1,5,1,
		5,3,5,174,8,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,182,8,6,10,6,12,6,185,9,6,1,
		7,1,7,3,7,189,8,7,1,7,3,7,192,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,201,
		8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,211,8,8,3,8,213,8,8,3,8,215,8,
		8,1,8,1,8,1,9,1,9,1,9,1,9,3,9,223,8,9,1,9,1,9,5,9,227,8,9,10,9,12,9,230,
		9,9,1,9,3,9,233,8,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,241,8,10,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,5,13,254,8,13,10,13,12,13,
		257,9,13,1,14,1,14,3,14,261,8,14,1,15,1,15,1,15,1,15,1,15,3,15,268,8,15,
		1,16,1,16,1,16,1,16,1,16,3,16,275,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,5,17,284,8,17,10,17,12,17,287,9,17,1,17,1,17,1,18,1,18,1,18,1,18,5,
		18,295,8,18,10,18,12,18,298,9,18,3,18,300,8,18,1,18,1,18,1,19,1,19,1,20,
		1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,319,8,
		21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,328,8,22,1,23,1,23,1,23,1,23,
		1,23,3,23,335,8,23,1,24,1,24,1,24,3,24,340,8,24,1,25,1,25,1,25,1,25,1,
		25,3,25,347,8,25,1,26,1,26,1,26,1,26,5,26,353,8,26,10,26,12,26,356,9,26,
		1,26,3,26,359,8,26,1,26,3,26,362,8,26,1,27,1,27,1,27,1,27,1,28,1,28,1,
		28,1,29,1,29,3,29,373,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
		5,31,384,8,31,10,31,12,31,387,9,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		5,32,396,8,32,10,32,12,32,399,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
		1,33,1,33,1,33,1,33,3,33,412,8,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,
		37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,
		44,1,45,1,45,1,45,1,45,3,45,440,8,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,
		1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,460,8,49,1,
		50,1,50,1,50,3,50,465,8,50,1,50,1,50,1,51,1,51,5,51,471,8,51,10,51,12,
		51,474,9,51,1,51,1,51,5,51,478,8,51,10,51,12,51,481,9,51,1,51,1,51,1,52,
		1,52,1,52,1,52,1,52,1,53,1,53,3,53,492,8,53,1,54,1,54,1,54,1,54,3,54,498,
		8,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,59,1,60,
		1,60,3,60,514,8,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,5,62,523,8,62,10,
		62,12,62,526,9,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,
		67,0,1,64,68,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
		90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
		128,130,132,134,0,1,1,0,21,26,543,0,136,1,0,0,0,2,145,1,0,0,0,4,147,1,
		0,0,0,6,155,1,0,0,0,8,157,1,0,0,0,10,169,1,0,0,0,12,175,1,0,0,0,14,188,
		1,0,0,0,16,193,1,0,0,0,18,218,1,0,0,0,20,240,1,0,0,0,22,242,1,0,0,0,24,
		246,1,0,0,0,26,250,1,0,0,0,28,260,1,0,0,0,30,262,1,0,0,0,32,269,1,0,0,
		0,34,276,1,0,0,0,36,290,1,0,0,0,38,303,1,0,0,0,40,305,1,0,0,0,42,307,1,
		0,0,0,44,327,1,0,0,0,46,329,1,0,0,0,48,336,1,0,0,0,50,341,1,0,0,0,52,348,
		1,0,0,0,54,363,1,0,0,0,56,367,1,0,0,0,58,370,1,0,0,0,60,376,1,0,0,0,62,
		380,1,0,0,0,64,388,1,0,0,0,66,411,1,0,0,0,68,413,1,0,0,0,70,415,1,0,0,
		0,72,417,1,0,0,0,74,419,1,0,0,0,76,421,1,0,0,0,78,423,1,0,0,0,80,425,1,
		0,0,0,82,427,1,0,0,0,84,429,1,0,0,0,86,431,1,0,0,0,88,433,1,0,0,0,90,439,
		1,0,0,0,92,441,1,0,0,0,94,444,1,0,0,0,96,447,1,0,0,0,98,459,1,0,0,0,100,
		461,1,0,0,0,102,468,1,0,0,0,104,484,1,0,0,0,106,491,1,0,0,0,108,497,1,
		0,0,0,110,499,1,0,0,0,112,501,1,0,0,0,114,503,1,0,0,0,116,505,1,0,0,0,
		118,507,1,0,0,0,120,513,1,0,0,0,122,515,1,0,0,0,124,519,1,0,0,0,126,527,
		1,0,0,0,128,529,1,0,0,0,130,531,1,0,0,0,132,533,1,0,0,0,134,535,1,0,0,
		0,136,137,3,2,1,0,137,138,5,0,0,1,138,1,1,0,0,0,139,141,3,4,2,0,140,139,
		1,0,0,0,140,141,1,0,0,0,141,146,1,0,0,0,142,144,3,6,3,0,143,142,1,0,0,
		0,143,144,1,0,0,0,144,146,1,0,0,0,145,140,1,0,0,0,145,143,1,0,0,0,146,
		3,1,0,0,0,147,148,5,1,0,0,148,149,3,126,63,0,149,150,3,2,1,0,150,5,1,0,
		0,0,151,156,3,8,4,0,152,156,3,10,5,0,153,156,3,14,7,0,154,156,3,42,21,
		0,155,151,1,0,0,0,155,152,1,0,0,0,155,153,1,0,0,0,155,154,1,0,0,0,156,
		7,1,0,0,0,157,158,5,2,0,0,158,159,3,106,53,0,159,160,3,126,63,0,160,162,
		5,3,0,0,161,163,3,12,6,0,162,161,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,
		0,164,165,5,4,0,0,165,167,3,58,29,0,166,168,3,6,3,0,167,166,1,0,0,0,167,
		168,1,0,0,0,168,9,1,0,0,0,169,170,5,5,0,0,170,171,3,106,53,0,171,173,3,
		50,25,0,172,174,3,6,3,0,173,172,1,0,0,0,173,174,1,0,0,0,174,11,1,0,0,0,
		175,176,3,106,53,0,176,183,3,126,63,0,177,178,5,6,0,0,178,179,3,106,53,
		0,179,180,3,126,63,0,180,182,1,0,0,0,181,177,1,0,0,0,182,185,1,0,0,0,183,
		181,1,0,0,0,183,184,1,0,0,0,184,13,1,0,0,0,185,183,1,0,0,0,186,189,3,16,
		8,0,187,189,3,18,9,0,188,186,1,0,0,0,188,187,1,0,0,0,189,191,1,0,0,0,190,
		192,3,6,3,0,191,190,1,0,0,0,191,192,1,0,0,0,192,15,1,0,0,0,193,194,5,7,
		0,0,194,195,3,126,63,0,195,200,5,8,0,0,196,197,5,9,0,0,197,198,3,64,32,
		0,198,199,5,10,0,0,199,201,1,0,0,0,200,196,1,0,0,0,200,201,1,0,0,0,201,
		202,1,0,0,0,202,203,5,11,0,0,203,204,3,64,32,0,204,205,5,10,0,0,205,206,
		5,12,0,0,206,214,3,64,32,0,207,212,5,10,0,0,208,210,3,36,18,0,209,211,
		5,10,0,0,210,209,1,0,0,0,210,211,1,0,0,0,211,213,1,0,0,0,212,208,1,0,0,
		0,212,213,1,0,0,0,213,215,1,0,0,0,214,207,1,0,0,0,214,215,1,0,0,0,215,
		216,1,0,0,0,216,217,5,13,0,0,217,17,1,0,0,0,218,219,5,14,0,0,219,220,3,
		126,63,0,220,222,5,8,0,0,221,223,3,20,10,0,222,221,1,0,0,0,222,223,1,0,
		0,0,223,228,1,0,0,0,224,225,5,10,0,0,225,227,3,20,10,0,226,224,1,0,0,0,
		227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,232,1,0,0,0,230,228,
		1,0,0,0,231,233,5,10,0,0,232,231,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,
		0,234,235,5,13,0,0,235,19,1,0,0,0,236,241,3,22,11,0,237,241,3,24,12,0,
		238,241,3,28,14,0,239,241,3,36,18,0,240,236,1,0,0,0,240,237,1,0,0,0,240,
		238,1,0,0,0,240,239,1,0,0,0,241,21,1,0,0,0,242,243,3,124,62,0,243,244,
		5,15,0,0,244,245,3,124,62,0,245,23,1,0,0,0,246,247,3,120,60,0,247,248,
		5,16,0,0,248,249,3,124,62,0,249,25,1,0,0,0,250,255,3,28,14,0,251,252,5,
		6,0,0,252,254,3,28,14,0,253,251,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,
		0,255,256,1,0,0,0,256,27,1,0,0,0,257,255,1,0,0,0,258,261,3,30,15,0,259,
		261,3,32,16,0,260,258,1,0,0,0,260,259,1,0,0,0,261,29,1,0,0,0,262,263,3,
		120,60,0,263,267,5,17,0,0,264,268,3,30,15,0,265,268,3,120,60,0,266,268,
		3,34,17,0,267,264,1,0,0,0,267,265,1,0,0,0,267,266,1,0,0,0,268,31,1,0,0,
		0,269,270,3,98,49,0,270,274,5,17,0,0,271,275,3,30,15,0,272,275,3,120,60,
		0,273,275,3,34,17,0,274,271,1,0,0,0,274,272,1,0,0,0,274,273,1,0,0,0,275,
		33,1,0,0,0,276,277,5,18,0,0,277,278,3,64,32,0,278,285,3,120,60,0,279,280,
		5,6,0,0,280,281,3,64,32,0,281,282,3,120,60,0,282,284,1,0,0,0,283,279,1,
		0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,0,
		287,285,1,0,0,0,288,289,5,19,0,0,289,35,1,0,0,0,290,299,5,20,0,0,291,296,
		3,38,19,0,292,293,5,6,0,0,293,295,3,38,19,0,294,292,1,0,0,0,295,298,1,
		0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,
		299,291,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,302,5,20,0,0,302,37,
		1,0,0,0,303,304,3,40,20,0,304,39,1,0,0,0,305,306,7,0,0,0,306,41,1,0,0,
		0,307,308,5,27,0,0,308,309,5,8,0,0,309,310,5,28,0,0,310,311,3,120,60,0,
		311,312,5,10,0,0,312,313,5,29,0,0,313,314,3,64,32,0,314,315,5,10,0,0,315,
		316,5,30,0,0,316,318,3,64,32,0,317,319,5,10,0,0,318,317,1,0,0,0,318,319,
		1,0,0,0,319,320,1,0,0,0,320,321,5,13,0,0,321,43,1,0,0,0,322,328,3,46,23,
		0,323,328,3,48,24,0,324,328,3,50,25,0,325,328,3,52,26,0,326,328,3,60,30,
		0,327,322,1,0,0,0,327,323,1,0,0,0,327,324,1,0,0,0,327,325,1,0,0,0,327,
		326,1,0,0,0,328,45,1,0,0,0,329,330,5,31,0,0,330,331,3,64,32,0,331,332,
		5,32,0,0,332,334,3,58,29,0,333,335,3,44,22,0,334,333,1,0,0,0,334,335,1,
		0,0,0,335,47,1,0,0,0,336,337,3,106,53,0,337,339,3,50,25,0,338,340,3,44,
		22,0,339,338,1,0,0,0,339,340,1,0,0,0,340,49,1,0,0,0,341,342,3,126,63,0,
		342,343,5,33,0,0,343,344,3,64,32,0,344,346,5,10,0,0,345,347,3,44,22,0,
		346,345,1,0,0,0,346,347,1,0,0,0,347,51,1,0,0,0,348,349,5,34,0,0,349,350,
		3,64,32,0,350,354,3,58,29,0,351,353,3,54,27,0,352,351,1,0,0,0,353,356,
		1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,
		0,357,359,3,56,28,0,358,357,1,0,0,0,358,359,1,0,0,0,359,361,1,0,0,0,360,
		362,3,44,22,0,361,360,1,0,0,0,361,362,1,0,0,0,362,53,1,0,0,0,363,364,5,
		35,0,0,364,365,3,64,32,0,365,366,3,58,29,0,366,55,1,0,0,0,367,368,5,36,
		0,0,368,369,3,58,29,0,369,57,1,0,0,0,370,372,5,8,0,0,371,373,3,44,22,0,
		372,371,1,0,0,0,372,373,1,0,0,0,373,374,1,0,0,0,374,375,5,13,0,0,375,59,
		1,0,0,0,376,377,5,37,0,0,377,378,3,64,32,0,378,379,5,10,0,0,379,61,1,0,
		0,0,380,385,3,64,32,0,381,382,5,6,0,0,382,384,3,64,32,0,383,381,1,0,0,
		0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,63,1,0,0,0,387,385,
		1,0,0,0,388,389,6,32,-1,0,389,390,3,90,45,0,390,397,1,0,0,0,391,392,10,
		2,0,0,392,393,3,66,33,0,393,394,3,64,32,3,394,396,1,0,0,0,395,391,1,0,
		0,0,396,399,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,65,1,0,0,0,399,
		397,1,0,0,0,400,412,3,68,34,0,401,412,3,70,35,0,402,412,3,72,36,0,403,
		412,3,74,37,0,404,412,3,76,38,0,405,412,3,78,39,0,406,412,3,80,40,0,407,
		412,3,82,41,0,408,412,3,84,42,0,409,412,3,86,43,0,410,412,3,88,44,0,411,
		400,1,0,0,0,411,401,1,0,0,0,411,402,1,0,0,0,411,403,1,0,0,0,411,404,1,
		0,0,0,411,405,1,0,0,0,411,406,1,0,0,0,411,407,1,0,0,0,411,408,1,0,0,0,
		411,409,1,0,0,0,411,410,1,0,0,0,412,67,1,0,0,0,413,414,5,38,0,0,414,69,
		1,0,0,0,415,416,5,39,0,0,416,71,1,0,0,0,417,418,5,40,0,0,418,73,1,0,0,
		0,419,420,5,41,0,0,420,75,1,0,0,0,421,422,5,42,0,0,422,77,1,0,0,0,423,
		424,5,43,0,0,424,79,1,0,0,0,425,426,5,44,0,0,426,81,1,0,0,0,427,428,5,
		45,0,0,428,83,1,0,0,0,429,430,5,46,0,0,430,85,1,0,0,0,431,432,5,47,0,0,
		432,87,1,0,0,0,433,434,5,48,0,0,434,89,1,0,0,0,435,440,3,92,46,0,436,440,
		3,94,47,0,437,440,3,96,48,0,438,440,3,98,49,0,439,435,1,0,0,0,439,436,
		1,0,0,0,439,437,1,0,0,0,439,438,1,0,0,0,440,91,1,0,0,0,441,442,5,49,0,
		0,442,443,3,64,32,0,443,93,1,0,0,0,444,445,5,41,0,0,445,446,3,64,32,0,
		446,95,1,0,0,0,447,448,5,3,0,0,448,449,3,64,32,0,449,450,5,4,0,0,450,97,
		1,0,0,0,451,460,3,100,50,0,452,460,3,120,60,0,453,460,3,134,67,0,454,460,
		3,132,66,0,455,460,3,130,65,0,456,460,3,128,64,0,457,460,3,102,51,0,458,
		460,3,104,52,0,459,451,1,0,0,0,459,452,1,0,0,0,459,453,1,0,0,0,459,454,
		1,0,0,0,459,455,1,0,0,0,459,456,1,0,0,0,459,457,1,0,0,0,459,458,1,0,0,
		0,460,99,1,0,0,0,461,462,3,120,60,0,462,464,5,3,0,0,463,465,3,62,31,0,
		464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,467,5,4,0,0,467,101,
		1,0,0,0,468,472,5,8,0,0,469,471,3,64,32,0,470,469,1,0,0,0,471,474,1,0,
		0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,479,1,0,0,0,474,472,1,0,0,0,475,
		476,5,6,0,0,476,478,3,64,32,0,477,475,1,0,0,0,478,481,1,0,0,0,479,477,
		1,0,0,0,479,480,1,0,0,0,480,482,1,0,0,0,481,479,1,0,0,0,482,483,5,13,0,
		0,483,103,1,0,0,0,484,485,3,126,63,0,485,486,5,18,0,0,486,487,3,64,32,
		0,487,488,5,19,0,0,488,105,1,0,0,0,489,492,3,108,54,0,490,492,3,118,59,
		0,491,489,1,0,0,0,491,490,1,0,0,0,492,107,1,0,0,0,493,498,3,110,55,0,494,
		498,3,112,56,0,495,498,3,114,57,0,496,498,3,116,58,0,497,493,1,0,0,0,497,
		494,1,0,0,0,497,495,1,0,0,0,497,496,1,0,0,0,498,109,1,0,0,0,499,500,5,
		50,0,0,500,111,1,0,0,0,501,502,5,51,0,0,502,113,1,0,0,0,503,504,5,52,0,
		0,504,115,1,0,0,0,505,506,5,53,0,0,506,117,1,0,0,0,507,508,5,18,0,0,508,
		509,3,106,53,0,509,510,5,19,0,0,510,119,1,0,0,0,511,514,3,126,63,0,512,
		514,3,122,61,0,513,511,1,0,0,0,513,512,1,0,0,0,514,121,1,0,0,0,515,516,
		3,126,63,0,516,517,5,54,0,0,517,518,3,126,63,0,518,123,1,0,0,0,519,524,
		3,126,63,0,520,521,5,6,0,0,521,523,3,126,63,0,522,520,1,0,0,0,523,526,
		1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,125,1,0,0,0,526,524,1,0,0,
		0,527,528,5,55,0,0,528,127,1,0,0,0,529,530,5,56,0,0,530,129,1,0,0,0,531,
		532,5,57,0,0,532,131,1,0,0,0,533,534,5,58,0,0,534,133,1,0,0,0,535,536,
		5,59,0,0,536,135,1,0,0,0,46,140,143,145,155,162,167,173,183,188,191,200,
		210,212,214,222,228,232,240,255,260,267,274,285,296,299,318,327,334,339,
		346,354,358,361,372,385,397,411,439,459,464,472,479,491,497,513,524
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
