//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/thoma/Documents/VSCODE/AQL/AntlrCSharp/AQL.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, ID=59, BOOL=60, 
		INT=61, DOUBLE=62, STRING=63, WS=64;
	public const int
		RULE_prog = 0, RULE_importList = 1, RULE_def = 2, RULE_network = 3, RULE_idList = 4, 
		RULE_qualifiedIdList = 5, RULE_instances = 6, RULE_instancesList = 7, 
		RULE_instance = 8, RULE_routes = 9, RULE_routesB = 10, RULE_routeIDList = 11, 
		RULE_routeIDListB = 12, RULE_metrics = 13, RULE_metricList = 14, RULE_metricListA = 15, 
		RULE_metric = 16, RULE_serviceCount = 17, RULE_paramList = 18, RULE_paramListA = 19, 
		RULE_assign = 20, RULE_stmt = 21, RULE_stmtA = 22, RULE_else1 = 23, RULE_else2 = 24, 
		RULE_elseIf = 25, RULE_expr = 26, RULE_value = 27, RULE_actualParamList = 28, 
		RULE_actualParamListA = 29, RULE_funcCall = 30, RULE_type = 31, RULE_array = 32, 
		RULE_arrayValue = 33, RULE_qualifiedID = 34;
	public static readonly string[] ruleNames = {
		"prog", "importList", "def", "network", "idList", "qualifiedIdList", "instances", 
		"instancesList", "instance", "routes", "routesB", "routeIDList", "routeIDListB", 
		"metrics", "metricList", "metricListA", "metric", "serviceCount", "paramList", 
		"paramListA", "assign", "stmt", "stmtA", "else1", "else2", "elseIf", "expr", 
		"value", "actualParamList", "actualParamListA", "funcCall", "type", "array", 
		"arrayValue", "qualifiedID"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'const'", "'function'", "'('", "')'", "'{'", "'}'", 
		"'simulate'", "'run:'", "','", "'until:'", "'times:'", "'queue'", "'service:'", 
		"'capacity:'", "'network'", "'inputs:'", "';'", "'outputs:'", "'routes:'", 
		"'instances:'", "':'", "'->'", "'['", "']'", "'metrics:'", "'mrt'", "'vrt'", 
		"'util'", "'throughput'", "'num'", "'avgNum'", "'number_of_services:'", 
		"'='", "'while'", "'do'", "'if'", "'return'", "'else {'", "'else if'", 
		"'!'", "'-'", "'*'", "'/'", "'+'", "'<'", "'<='", "'>'", "'>='", "'=='", 
		"'!='", "'&&'", "'||'", "'bool'", "'int'", "'double'", "'string'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "ID", 
		"BOOL", "INT", "DOUBLE", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportListContext importList() {
			return GetRuleContext<ImportListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefContext[] def() {
			return GetRuleContexts<DefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefContext def(int i) {
			return GetRuleContext<DefContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			importList();
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73996L) != 0)) {
				{
				{
				State = 71;
				def();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AQLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportListContext importList() {
			return GetRuleContext<ImportListContext>(0);
		}
		public ImportListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportListContext importList() {
		ImportListContext _localctx = new ImportListContext(Context, State);
		EnterRule(_localctx, 2, RULE_importList);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77;
				Match(T__0);
				State = 78;
				Match(STRING);
				State = 79;
				importList();
				}
				break;
			case Eof:
			case T__1:
			case T__2:
			case T__7:
			case T__12:
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AQLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NetworkContext network() {
			return GetRuleContext<NetworkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID() {
			return GetRuleContext<QualifiedIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefContext def() {
		DefContext _localctx = new DefContext(Context, State);
		EnterRule(_localctx, 4, RULE_def);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				Match(T__1);
				State = 84;
				type();
				State = 85;
				assign();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87;
				Match(T__2);
				State = 88;
				type();
				State = 89;
				Match(ID);
				State = 90;
				Match(T__3);
				State = 91;
				paramList();
				State = 92;
				Match(T__4);
				State = 93;
				Match(T__5);
				State = 94;
				stmt();
				State = 95;
				Match(T__6);
				}
				break;
			case T__12:
			case T__15:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97;
				network();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 4);
				{
				State = 98;
				Match(T__7);
				State = 99;
				Match(T__5);
				State = 100;
				Match(T__8);
				State = 101;
				qualifiedID();
				State = 102;
				Match(T__9);
				State = 103;
				Match(T__10);
				State = 104;
				expr(0);
				State = 105;
				Match(T__9);
				State = 106;
				Match(T__11);
				State = 107;
				expr(0);
				State = 108;
				Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NetworkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AQLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServiceCountContext serviceCount() {
			return GetRuleContext<ServiceCountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetricsContext metrics() {
			return GetRuleContext<MetricsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext[] idList() {
			return GetRuleContexts<IdListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext idList(int i) {
			return GetRuleContext<IdListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutesContext routes() {
			return GetRuleContext<RoutesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstancesContext instances() {
			return GetRuleContext<InstancesContext>(0);
		}
		public NetworkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NetworkContext network() {
		NetworkContext _localctx = new NetworkContext(Context, State);
		EnterRule(_localctx, 6, RULE_network);
		int _la;
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112;
				Match(T__12);
				State = 113;
				Match(ID);
				State = 114;
				Match(T__5);
				State = 115;
				serviceCount();
				State = 116;
				Match(T__13);
				State = 117;
				value();
				State = 118;
				Match(T__9);
				State = 119;
				Match(T__14);
				State = 120;
				value();
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 121;
					Match(T__9);
					State = 122;
					metrics();
					}
				}

				State = 125;
				Match(T__6);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127;
				Match(T__15);
				State = 128;
				Match(ID);
				State = 129;
				Match(T__5);
				State = 130;
				Match(T__16);
				State = 131;
				idList();
				State = 132;
				Match(T__17);
				State = 133;
				Match(T__18);
				State = 134;
				idList();
				State = 137;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 135;
					Match(T__17);
					State = 136;
					instances();
					}
					break;
				}
				State = 139;
				Match(T__17);
				State = 140;
				Match(T__19);
				State = 141;
				Match(T__5);
				State = 142;
				routes();
				State = 143;
				Match(T__6);
				State = 146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 144;
					Match(T__17);
					State = 145;
					metrics();
					}
					break;
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 148;
					Match(T__17);
					}
				}

				State = 151;
				Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(AQLParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(AQLParser.ID, i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 8, RULE_idList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(ID);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 156;
				Match(T__9);
				State = 157;
				Match(ID);
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext[] qualifiedID() {
			return GetRuleContexts<QualifiedIDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID(int i) {
			return GetRuleContext<QualifiedIDContext>(i);
		}
		public QualifiedIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdListContext qualifiedIdList() {
		QualifiedIdListContext _localctx = new QualifiedIdListContext(Context, State);
		EnterRule(_localctx, 10, RULE_qualifiedIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			qualifiedID();
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 164;
				Match(T__9);
				State = 165;
				qualifiedID();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstancesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstancesListContext instancesList() {
			return GetRuleContext<InstancesListContext>(0);
		}
		public InstancesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instances; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstances(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstancesContext instances() {
		InstancesContext _localctx = new InstancesContext(Context, State);
		EnterRule(_localctx, 12, RULE_instances);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(T__20);
			State = 172;
			Match(T__5);
			State = 173;
			instancesList();
			State = 174;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstancesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstanceContext[] instance() {
			return GetRuleContexts<InstanceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstanceContext instance(int i) {
			return GetRuleContext<InstanceContext>(i);
		}
		public InstancesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instancesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstancesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstancesListContext instancesList() {
		InstancesListContext _localctx = new InstancesListContext(Context, State);
		EnterRule(_localctx, 14, RULE_instancesList);
		int _la;
		try {
			int _alt;
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				instance();
				State = 181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 177;
						Match(T__17);
						State = 178;
						instance();
						}
						} 
					}
					State = 183;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 184;
					Match(T__17);
					}
				}

				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID() {
			return GetRuleContext<QualifiedIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public InstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceContext instance() {
		InstanceContext _localctx = new InstanceContext(Context, State);
		EnterRule(_localctx, 16, RULE_instance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			qualifiedID();
			State = 191;
			Match(T__21);
			State = 192;
			idList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext[] qualifiedID() {
			return GetRuleContexts<QualifiedIDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID(int i) {
			return GetRuleContext<QualifiedIDContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutesBContext routesB() {
			return GetRuleContext<RoutesBContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteIDListContext routeIDList() {
			return GetRuleContext<RouteIDListContext>(0);
		}
		public RoutesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutesContext routes() {
		RoutesContext _localctx = new RoutesContext(Context, State);
		EnterRule(_localctx, 18, RULE_routes);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194;
				qualifiedID();
				State = 195;
				Match(T__22);
				State = 196;
				qualifiedID();
				State = 197;
				routesB();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				qualifiedID();
				State = 200;
				Match(T__22);
				State = 201;
				Match(T__23);
				State = 202;
				routeIDList();
				State = 203;
				Match(T__24);
				State = 204;
				routesB();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutesBContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext[] qualifiedID() {
			return GetRuleContexts<QualifiedIDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID(int i) {
			return GetRuleContext<QualifiedIDContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutesBContext routesB() {
			return GetRuleContext<RoutesBContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteIDListContext routeIDList() {
			return GetRuleContext<RouteIDListContext>(0);
		}
		public RoutesBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routesB; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutesB(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutesBContext routesB() {
		RoutesBContext _localctx = new RoutesBContext(Context, State);
		EnterRule(_localctx, 20, RULE_routesB);
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				Match(T__9);
				State = 209;
				qualifiedID();
				State = 210;
				Match(T__22);
				State = 211;
				qualifiedID();
				State = 212;
				routesB();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214;
				Match(T__9);
				State = 215;
				qualifiedID();
				State = 216;
				Match(T__22);
				State = 217;
				Match(T__23);
				State = 218;
				routeIDList();
				State = 219;
				Match(T__24);
				State = 220;
				routesB();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteIDListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID() {
			return GetRuleContext<QualifiedIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteIDListBContext routeIDListB() {
			return GetRuleContext<RouteIDListBContext>(0);
		}
		public RouteIDListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routeIDList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRouteIDList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteIDListContext routeIDList() {
		RouteIDListContext _localctx = new RouteIDListContext(Context, State);
		EnterRule(_localctx, 22, RULE_routeIDList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			expr(0);
			State = 226;
			qualifiedID();
			State = 227;
			routeIDListB();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteIDListBContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID() {
			return GetRuleContext<QualifiedIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteIDListBContext routeIDListB() {
			return GetRuleContext<RouteIDListBContext>(0);
		}
		public RouteIDListBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routeIDListB; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRouteIDListB(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteIDListBContext routeIDListB() {
		RouteIDListBContext _localctx = new RouteIDListBContext(Context, State);
		EnterRule(_localctx, 24, RULE_routeIDListB);
		try {
			State = 235;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229;
				Match(T__9);
				State = 230;
				expr(0);
				State = 231;
				qualifiedID();
				State = 232;
				routeIDListB();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetricsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetricListContext metricList() {
			return GetRuleContext<MetricListContext>(0);
		}
		public MetricsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metrics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetrics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetricsContext metrics() {
		MetricsContext _localctx = new MetricsContext(Context, State);
		EnterRule(_localctx, 26, RULE_metrics);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(T__25);
			State = 238;
			Match(T__23);
			State = 239;
			metricList();
			State = 240;
			Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetricListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetricContext metric() {
			return GetRuleContext<MetricContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetricListAContext metricListA() {
			return GetRuleContext<MetricListAContext>(0);
		}
		public MetricListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metricList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetricList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetricListContext metricList() {
		MetricListContext _localctx = new MetricListContext(Context, State);
		EnterRule(_localctx, 28, RULE_metricList);
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				metric();
				State = 243;
				metricListA();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetricListAContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetricContext metric() {
			return GetRuleContext<MetricContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetricListAContext metricListA() {
			return GetRuleContext<MetricListAContext>(0);
		}
		public MetricListAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metricListA; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetricListA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetricListAContext metricListA() {
		MetricListAContext _localctx = new MetricListAContext(Context, State);
		EnterRule(_localctx, 30, RULE_metricListA);
		try {
			State = 253;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248;
				Match(T__9);
				State = 249;
				metric();
				State = 250;
				metricListA();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetricContext : ParserRuleContext {
		public MetricContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetricContext metric() {
		MetricContext _localctx = new MetricContext(Context, State);
		EnterRule(_localctx, 32, RULE_metric);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8455716864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceCountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ServiceCountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceCount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServiceCount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServiceCountContext serviceCount() {
		ServiceCountContext _localctx = new ServiceCountContext(Context, State);
		EnterRule(_localctx, 34, RULE_serviceCount);
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__32:
				EnterOuterAlt(_localctx, 1);
				{
				State = 257;
				Match(T__32);
				State = 258;
				expr(0);
				State = 259;
				Match(T__9);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID() {
			return GetRuleContext<QualifiedIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListAContext paramListA() {
			return GetRuleContext<ParamListAContext>(0);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 36, RULE_paramList);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__15:
			case T__23:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264;
				type();
				State = 265;
				qualifiedID();
				State = 266;
				paramListA();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListAContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID() {
			return GetRuleContext<QualifiedIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListAContext paramListA() {
			return GetRuleContext<ParamListAContext>(0);
		}
		public ParamListAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramListA; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamListA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListAContext paramListA() {
		ParamListAContext _localctx = new ParamListAContext(Context, State);
		EnterRule(_localctx, 38, RULE_paramListA);
		try {
			State = 277;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271;
				Match(T__9);
				State = 272;
				type();
				State = 273;
				qualifiedID();
				State = 274;
				paramListA();
				}
				break;
			case Eof:
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AQLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 40, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(ID);
			State = 280;
			Match(T__33);
			State = 281;
			expr(0);
			State = 282;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtAContext stmtA() {
			return GetRuleContext<StmtAContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_stmt);
		try {
			State = 288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284;
				stmtA();
				State = 285;
				stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtAContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else1Context else1() {
			return GetRuleContext<Else1Context>(0);
		}
		public StmtAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtA; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtAContext stmtA() {
		StmtAContext _localctx = new StmtAContext(Context, State);
		EnterRule(_localctx, 44, RULE_stmtA);
		try {
			State = 310;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__34:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290;
				Match(T__34);
				State = 291;
				expr(0);
				State = 292;
				Match(T__35);
				State = 293;
				stmt();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295;
				assign();
				}
				break;
			case T__3:
			case T__15:
			case T__23:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
				EnterOuterAlt(_localctx, 3);
				{
				State = 296;
				type();
				State = 297;
				assign();
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 4);
				{
				State = 299;
				Match(T__36);
				State = 300;
				expr(0);
				State = 301;
				Match(T__5);
				State = 302;
				stmt();
				State = 303;
				Match(T__6);
				State = 304;
				else1();
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 5);
				{
				State = 306;
				Match(T__37);
				State = 307;
				expr(0);
				State = 308;
				Match(T__17);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfContext elseIf() {
			return GetRuleContext<ElseIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else2Context else2() {
			return GetRuleContext<Else2Context>(0);
		}
		public Else1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else1Context else1() {
		Else1Context _localctx = new Else1Context(Context, State);
		EnterRule(_localctx, 46, RULE_else1);
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312;
				elseIf();
				State = 313;
				else2();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public Else2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else2Context else2() {
		Else2Context _localctx = new Else2Context(Context, State);
		EnterRule(_localctx, 48, RULE_else2);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__38:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318;
				Match(T__38);
				State = 319;
				stmt();
				State = 320;
				Match(T__6);
				}
				break;
			case T__3:
			case T__6:
			case T__15:
			case T__23:
			case T__34:
			case T__36:
			case T__37:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfContext elseIf() {
			return GetRuleContext<ElseIfContext>(0);
		}
		public ElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfContext elseIf() {
		ElseIfContext _localctx = new ElseIfContext(Context, State);
		EnterRule(_localctx, 50, RULE_elseIf);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__39:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325;
				Match(T__39);
				State = 326;
				expr(0);
				State = 327;
				Match(T__5);
				State = 328;
				stmt();
				State = 329;
				Match(T__6);
				State = 330;
				elseIf();
				}
				break;
			case T__3:
			case T__6:
			case T__15:
			case T__23:
			case T__34:
			case T__36:
			case T__37:
			case T__38:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutesContext routes() {
			return GetRuleContext<RoutesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 336;
				value();
				}
				break;
			case 2:
				{
				State = 337;
				routes();
				}
				break;
			case 3:
				{
				State = 338;
				_la = TokenStream.LA(1);
				if ( !(_la==T__40 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 339;
				expr(7);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 362;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 360;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 342;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 343;
						_la = TokenStream.LA(1);
						if ( !(_la==T__42 || _la==T__43) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 344;
						expr(7);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 345;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 346;
						_la = TokenStream.LA(1);
						if ( !(_la==T__41 || _la==T__44) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 347;
						expr(6);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 348;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 349;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055531162664960L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 350;
						expr(5);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 351;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 352;
						_la = TokenStream.LA(1);
						if ( !(_la==T__49 || _la==T__50) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 353;
						expr(4);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 354;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 355;
						Match(T__51);
						State = 356;
						expr(3);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 357;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 358;
						Match(T__52);
						State = 359;
						expr(2);
						}
						break;
					}
					} 
				}
				State = 364;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID() {
			return GetRuleContext<QualifiedIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AQLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(AQLParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AQLParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(AQLParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayValueContext arrayValue() {
			return GetRuleContext<ArrayValueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 54, RULE_value);
		try {
			State = 373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 365;
				funcCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 366;
				qualifiedID();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 367;
				Match(STRING);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 368;
				Match(DOUBLE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 369;
				Match(INT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 370;
				Match(BOOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 371;
				array();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 372;
				arrayValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID() {
			return GetRuleContext<QualifiedIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListAContext paramListA() {
			return GetRuleContext<ParamListAContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ActualParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualParamList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParamListContext actualParamList() {
		ActualParamListContext _localctx = new ActualParamListContext(Context, State);
		EnterRule(_localctx, 56, RULE_actualParamList);
		try {
			State = 382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 375;
				qualifiedID();
				State = 376;
				paramListA();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378;
				value();
				State = 379;
				paramListA();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParamListAContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID() {
			return GetRuleContext<QualifiedIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListAContext paramListA() {
			return GetRuleContext<ParamListAContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ActualParamListAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualParamListA; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParamListA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParamListAContext actualParamListA() {
		ActualParamListAContext _localctx = new ActualParamListAContext(Context, State);
		EnterRule(_localctx, 58, RULE_actualParamListA);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384;
				Match(T__9);
				State = 385;
				qualifiedID();
				State = 386;
				paramListA();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				Match(T__9);
				State = 389;
				value();
				State = 390;
				paramListA();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID() {
			return GetRuleContext<QualifiedIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActualParamListContext actualParamList() {
			return GetRuleContext<ActualParamListContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 60, RULE_funcCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			qualifiedID();
			State = 396;
			Match(T__3);
			State = 397;
			actualParamList();
			State = 398;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_type);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__53:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400;
				Match(T__53);
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401;
				Match(T__54);
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 3);
				{
				State = 402;
				Match(T__55);
				}
				break;
			case T__56:
				EnterOuterAlt(_localctx, 4);
				{
				State = 403;
				Match(T__56);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 5);
				{
				State = 404;
				Match(T__15);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 6);
				{
				State = 405;
				Match(T__23);
				State = 406;
				type();
				State = 407;
				Match(T__24);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 7);
				{
				State = 409;
				Match(T__3);
				State = 410;
				type();
				State = 411;
				Match(T__22);
				State = 412;
				type();
				State = 413;
				Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 64, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			Match(T__5);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -576460752303423424L) != 0)) {
				{
				{
				State = 418;
				value();
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 424;
				Match(T__9);
				State = 425;
				value();
				}
				}
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 431;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID() {
			return GetRuleContext<QualifiedIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ArrayValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayValueContext arrayValue() {
		ArrayValueContext _localctx = new ArrayValueContext(Context, State);
		EnterRule(_localctx, 66, RULE_arrayValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			qualifiedID();
			State = 434;
			Match(T__23);
			State = 435;
			expr(0);
			State = 436;
			Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIDContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(AQLParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(AQLParser.ID, i);
		}
		public QualifiedIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedID; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAQLVisitor<TResult> typedVisitor = visitor as IAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIDContext qualifiedID() {
		QualifiedIDContext _localctx = new QualifiedIDContext(Context, State);
		EnterRule(_localctx, 68, RULE_qualifiedID);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(ID);
			State = 443;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 439;
					Match(T__57);
					State = 440;
					Match(ID);
					}
					} 
				}
				State = 445;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,64,447,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,1,0,5,
		0,73,8,0,10,0,12,0,76,9,0,1,1,1,1,1,1,1,1,3,1,82,8,1,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,3,2,111,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,3,3,124,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
		138,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,147,8,3,1,3,3,3,150,8,3,1,3,1,
		3,3,3,154,8,3,1,4,1,4,1,4,5,4,159,8,4,10,4,12,4,162,9,4,1,5,1,5,1,5,5,
		5,167,8,5,10,5,12,5,170,9,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,5,7,180,8,
		7,10,7,12,7,183,9,7,1,7,3,7,186,8,7,1,7,3,7,189,8,7,1,8,1,8,1,8,1,8,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,207,8,9,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,224,
		8,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,236,8,12,1,
		13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,247,8,14,1,15,1,15,1,15,
		1,15,1,15,3,15,254,8,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,3,17,263,8,
		17,1,18,1,18,1,18,1,18,1,18,3,18,270,8,18,1,19,1,19,1,19,1,19,1,19,1,19,
		3,19,278,8,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,3,21,289,8,
		21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,311,8,22,1,23,1,23,1,23,1,23,3,23,
		317,8,23,1,24,1,24,1,24,1,24,1,24,3,24,324,8,24,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,3,25,334,8,25,1,26,1,26,1,26,1,26,1,26,3,26,341,8,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,5,26,361,8,26,10,26,12,26,364,9,26,1,27,1,27,1,27,
		1,27,1,27,1,27,1,27,1,27,3,27,374,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,3,28,383,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,394,
		8,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,416,8,31,1,32,1,32,5,32,420,8,
		32,10,32,12,32,423,9,32,1,32,1,32,5,32,427,8,32,10,32,12,32,430,9,32,1,
		32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,5,34,442,8,34,10,34,12,
		34,445,9,34,1,34,0,1,52,35,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,0,6,1,0,27,32,
		1,0,41,42,1,0,43,44,2,0,42,42,45,45,1,0,46,49,1,0,50,51,471,0,70,1,0,0,
		0,2,81,1,0,0,0,4,110,1,0,0,0,6,153,1,0,0,0,8,155,1,0,0,0,10,163,1,0,0,
		0,12,171,1,0,0,0,14,188,1,0,0,0,16,190,1,0,0,0,18,206,1,0,0,0,20,223,1,
		0,0,0,22,225,1,0,0,0,24,235,1,0,0,0,26,237,1,0,0,0,28,246,1,0,0,0,30,253,
		1,0,0,0,32,255,1,0,0,0,34,262,1,0,0,0,36,269,1,0,0,0,38,277,1,0,0,0,40,
		279,1,0,0,0,42,288,1,0,0,0,44,310,1,0,0,0,46,316,1,0,0,0,48,323,1,0,0,
		0,50,333,1,0,0,0,52,340,1,0,0,0,54,373,1,0,0,0,56,382,1,0,0,0,58,393,1,
		0,0,0,60,395,1,0,0,0,62,415,1,0,0,0,64,417,1,0,0,0,66,433,1,0,0,0,68,438,
		1,0,0,0,70,74,3,2,1,0,71,73,3,4,2,0,72,71,1,0,0,0,73,76,1,0,0,0,74,72,
		1,0,0,0,74,75,1,0,0,0,75,1,1,0,0,0,76,74,1,0,0,0,77,78,5,1,0,0,78,79,5,
		63,0,0,79,82,3,2,1,0,80,82,1,0,0,0,81,77,1,0,0,0,81,80,1,0,0,0,82,3,1,
		0,0,0,83,84,5,2,0,0,84,85,3,62,31,0,85,86,3,40,20,0,86,111,1,0,0,0,87,
		88,5,3,0,0,88,89,3,62,31,0,89,90,5,59,0,0,90,91,5,4,0,0,91,92,3,36,18,
		0,92,93,5,5,0,0,93,94,5,6,0,0,94,95,3,42,21,0,95,96,5,7,0,0,96,111,1,0,
		0,0,97,111,3,6,3,0,98,99,5,8,0,0,99,100,5,6,0,0,100,101,5,9,0,0,101,102,
		3,68,34,0,102,103,5,10,0,0,103,104,5,11,0,0,104,105,3,52,26,0,105,106,
		5,10,0,0,106,107,5,12,0,0,107,108,3,52,26,0,108,109,5,7,0,0,109,111,1,
		0,0,0,110,83,1,0,0,0,110,87,1,0,0,0,110,97,1,0,0,0,110,98,1,0,0,0,111,
		5,1,0,0,0,112,113,5,13,0,0,113,114,5,59,0,0,114,115,5,6,0,0,115,116,3,
		34,17,0,116,117,5,14,0,0,117,118,3,54,27,0,118,119,5,10,0,0,119,120,5,
		15,0,0,120,123,3,54,27,0,121,122,5,10,0,0,122,124,3,26,13,0,123,121,1,
		0,0,0,123,124,1,0,0,0,124,125,1,0,0,0,125,126,5,7,0,0,126,154,1,0,0,0,
		127,128,5,16,0,0,128,129,5,59,0,0,129,130,5,6,0,0,130,131,5,17,0,0,131,
		132,3,8,4,0,132,133,5,18,0,0,133,134,5,19,0,0,134,137,3,8,4,0,135,136,
		5,18,0,0,136,138,3,12,6,0,137,135,1,0,0,0,137,138,1,0,0,0,138,139,1,0,
		0,0,139,140,5,18,0,0,140,141,5,20,0,0,141,142,5,6,0,0,142,143,3,18,9,0,
		143,146,5,7,0,0,144,145,5,18,0,0,145,147,3,26,13,0,146,144,1,0,0,0,146,
		147,1,0,0,0,147,149,1,0,0,0,148,150,5,18,0,0,149,148,1,0,0,0,149,150,1,
		0,0,0,150,151,1,0,0,0,151,152,5,7,0,0,152,154,1,0,0,0,153,112,1,0,0,0,
		153,127,1,0,0,0,154,7,1,0,0,0,155,160,5,59,0,0,156,157,5,10,0,0,157,159,
		5,59,0,0,158,156,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,
		0,161,9,1,0,0,0,162,160,1,0,0,0,163,168,3,68,34,0,164,165,5,10,0,0,165,
		167,3,68,34,0,166,164,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,
		1,0,0,0,169,11,1,0,0,0,170,168,1,0,0,0,171,172,5,21,0,0,172,173,5,6,0,
		0,173,174,3,14,7,0,174,175,5,7,0,0,175,13,1,0,0,0,176,181,3,16,8,0,177,
		178,5,18,0,0,178,180,3,16,8,0,179,177,1,0,0,0,180,183,1,0,0,0,181,179,
		1,0,0,0,181,182,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,184,186,5,18,0,
		0,185,184,1,0,0,0,185,186,1,0,0,0,186,189,1,0,0,0,187,189,1,0,0,0,188,
		176,1,0,0,0,188,187,1,0,0,0,189,15,1,0,0,0,190,191,3,68,34,0,191,192,5,
		22,0,0,192,193,3,8,4,0,193,17,1,0,0,0,194,195,3,68,34,0,195,196,5,23,0,
		0,196,197,3,68,34,0,197,198,3,20,10,0,198,207,1,0,0,0,199,200,3,68,34,
		0,200,201,5,23,0,0,201,202,5,24,0,0,202,203,3,22,11,0,203,204,5,25,0,0,
		204,205,3,20,10,0,205,207,1,0,0,0,206,194,1,0,0,0,206,199,1,0,0,0,207,
		19,1,0,0,0,208,209,5,10,0,0,209,210,3,68,34,0,210,211,5,23,0,0,211,212,
		3,68,34,0,212,213,3,20,10,0,213,224,1,0,0,0,214,215,5,10,0,0,215,216,3,
		68,34,0,216,217,5,23,0,0,217,218,5,24,0,0,218,219,3,22,11,0,219,220,5,
		25,0,0,220,221,3,20,10,0,221,224,1,0,0,0,222,224,1,0,0,0,223,208,1,0,0,
		0,223,214,1,0,0,0,223,222,1,0,0,0,224,21,1,0,0,0,225,226,3,52,26,0,226,
		227,3,68,34,0,227,228,3,24,12,0,228,23,1,0,0,0,229,230,5,10,0,0,230,231,
		3,52,26,0,231,232,3,68,34,0,232,233,3,24,12,0,233,236,1,0,0,0,234,236,
		1,0,0,0,235,229,1,0,0,0,235,234,1,0,0,0,236,25,1,0,0,0,237,238,5,26,0,
		0,238,239,5,24,0,0,239,240,3,28,14,0,240,241,5,25,0,0,241,27,1,0,0,0,242,
		243,3,32,16,0,243,244,3,30,15,0,244,247,1,0,0,0,245,247,1,0,0,0,246,242,
		1,0,0,0,246,245,1,0,0,0,247,29,1,0,0,0,248,249,5,10,0,0,249,250,3,32,16,
		0,250,251,3,30,15,0,251,254,1,0,0,0,252,254,1,0,0,0,253,248,1,0,0,0,253,
		252,1,0,0,0,254,31,1,0,0,0,255,256,7,0,0,0,256,33,1,0,0,0,257,258,5,33,
		0,0,258,259,3,52,26,0,259,260,5,10,0,0,260,263,1,0,0,0,261,263,1,0,0,0,
		262,257,1,0,0,0,262,261,1,0,0,0,263,35,1,0,0,0,264,265,3,62,31,0,265,266,
		3,68,34,0,266,267,3,38,19,0,267,270,1,0,0,0,268,270,1,0,0,0,269,264,1,
		0,0,0,269,268,1,0,0,0,270,37,1,0,0,0,271,272,5,10,0,0,272,273,3,62,31,
		0,273,274,3,68,34,0,274,275,3,38,19,0,275,278,1,0,0,0,276,278,1,0,0,0,
		277,271,1,0,0,0,277,276,1,0,0,0,278,39,1,0,0,0,279,280,5,59,0,0,280,281,
		5,34,0,0,281,282,3,52,26,0,282,283,5,18,0,0,283,41,1,0,0,0,284,285,3,44,
		22,0,285,286,3,42,21,0,286,289,1,0,0,0,287,289,1,0,0,0,288,284,1,0,0,0,
		288,287,1,0,0,0,289,43,1,0,0,0,290,291,5,35,0,0,291,292,3,52,26,0,292,
		293,5,36,0,0,293,294,3,42,21,0,294,311,1,0,0,0,295,311,3,40,20,0,296,297,
		3,62,31,0,297,298,3,40,20,0,298,311,1,0,0,0,299,300,5,37,0,0,300,301,3,
		52,26,0,301,302,5,6,0,0,302,303,3,42,21,0,303,304,5,7,0,0,304,305,3,46,
		23,0,305,311,1,0,0,0,306,307,5,38,0,0,307,308,3,52,26,0,308,309,5,18,0,
		0,309,311,1,0,0,0,310,290,1,0,0,0,310,295,1,0,0,0,310,296,1,0,0,0,310,
		299,1,0,0,0,310,306,1,0,0,0,311,45,1,0,0,0,312,313,3,50,25,0,313,314,3,
		48,24,0,314,317,1,0,0,0,315,317,1,0,0,0,316,312,1,0,0,0,316,315,1,0,0,
		0,317,47,1,0,0,0,318,319,5,39,0,0,319,320,3,42,21,0,320,321,5,7,0,0,321,
		324,1,0,0,0,322,324,1,0,0,0,323,318,1,0,0,0,323,322,1,0,0,0,324,49,1,0,
		0,0,325,326,5,40,0,0,326,327,3,52,26,0,327,328,5,6,0,0,328,329,3,42,21,
		0,329,330,5,7,0,0,330,331,3,50,25,0,331,334,1,0,0,0,332,334,1,0,0,0,333,
		325,1,0,0,0,333,332,1,0,0,0,334,51,1,0,0,0,335,336,6,26,-1,0,336,341,3,
		54,27,0,337,341,3,18,9,0,338,339,7,1,0,0,339,341,3,52,26,7,340,335,1,0,
		0,0,340,337,1,0,0,0,340,338,1,0,0,0,341,362,1,0,0,0,342,343,10,6,0,0,343,
		344,7,2,0,0,344,361,3,52,26,7,345,346,10,5,0,0,346,347,7,3,0,0,347,361,
		3,52,26,6,348,349,10,4,0,0,349,350,7,4,0,0,350,361,3,52,26,5,351,352,10,
		3,0,0,352,353,7,5,0,0,353,361,3,52,26,4,354,355,10,2,0,0,355,356,5,52,
		0,0,356,361,3,52,26,3,357,358,10,1,0,0,358,359,5,53,0,0,359,361,3,52,26,
		2,360,342,1,0,0,0,360,345,1,0,0,0,360,348,1,0,0,0,360,351,1,0,0,0,360,
		354,1,0,0,0,360,357,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,
		0,0,0,363,53,1,0,0,0,364,362,1,0,0,0,365,374,3,60,30,0,366,374,3,68,34,
		0,367,374,5,63,0,0,368,374,5,62,0,0,369,374,5,61,0,0,370,374,5,60,0,0,
		371,374,3,64,32,0,372,374,3,66,33,0,373,365,1,0,0,0,373,366,1,0,0,0,373,
		367,1,0,0,0,373,368,1,0,0,0,373,369,1,0,0,0,373,370,1,0,0,0,373,371,1,
		0,0,0,373,372,1,0,0,0,374,55,1,0,0,0,375,376,3,68,34,0,376,377,3,38,19,
		0,377,383,1,0,0,0,378,379,3,54,27,0,379,380,3,38,19,0,380,383,1,0,0,0,
		381,383,1,0,0,0,382,375,1,0,0,0,382,378,1,0,0,0,382,381,1,0,0,0,383,57,
		1,0,0,0,384,385,5,10,0,0,385,386,3,68,34,0,386,387,3,38,19,0,387,394,1,
		0,0,0,388,389,5,10,0,0,389,390,3,54,27,0,390,391,3,38,19,0,391,394,1,0,
		0,0,392,394,1,0,0,0,393,384,1,0,0,0,393,388,1,0,0,0,393,392,1,0,0,0,394,
		59,1,0,0,0,395,396,3,68,34,0,396,397,5,4,0,0,397,398,3,56,28,0,398,399,
		5,5,0,0,399,61,1,0,0,0,400,416,5,54,0,0,401,416,5,55,0,0,402,416,5,56,
		0,0,403,416,5,57,0,0,404,416,5,16,0,0,405,406,5,24,0,0,406,407,3,62,31,
		0,407,408,5,25,0,0,408,416,1,0,0,0,409,410,5,4,0,0,410,411,3,62,31,0,411,
		412,5,23,0,0,412,413,3,62,31,0,413,414,5,5,0,0,414,416,1,0,0,0,415,400,
		1,0,0,0,415,401,1,0,0,0,415,402,1,0,0,0,415,403,1,0,0,0,415,404,1,0,0,
		0,415,405,1,0,0,0,415,409,1,0,0,0,416,63,1,0,0,0,417,421,5,6,0,0,418,420,
		3,54,27,0,419,418,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,
		0,0,422,428,1,0,0,0,423,421,1,0,0,0,424,425,5,10,0,0,425,427,3,54,27,0,
		426,424,1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,431,
		1,0,0,0,430,428,1,0,0,0,431,432,5,7,0,0,432,65,1,0,0,0,433,434,3,68,34,
		0,434,435,5,24,0,0,435,436,3,52,26,0,436,437,5,25,0,0,437,67,1,0,0,0,438,
		443,5,59,0,0,439,440,5,58,0,0,440,442,5,59,0,0,441,439,1,0,0,0,442,445,
		1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,69,1,0,0,0,445,443,1,0,0,0,
		36,74,81,110,123,137,146,149,153,160,168,181,185,188,206,223,235,246,253,
		262,269,277,288,310,316,323,333,340,360,362,373,382,393,415,421,428,443
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
